var tipuesearch = {"pages": [{'title': '2021', 'text': '這是在 2021 年 Summer 所進行的更新, 1)首先將 CMSiMDE 更新. \n 2) 接下來則是下載  flutter_portable_final.7z  (只有 @gm 用戶可以下載) 後進行 flutter upgrade, 因為 2019 年採用 @gm 帳號下的 GDrive 儲存, 因此只能讓登入 @gm 帳號的用戶下載, 但是 2022 年 7 月之後, 教育版的 GDrive 已經有容量限制, 因此本次更新會將最新版的 Windows portable Flutter 將會轉移到 Flutter AT mde 專用 GDrive, 並且開放所有用戶下載. \n 3) 利用 Visual Studio Code 開發 Flutter App 之前, 必須啟動 BlueStacks (本次測試第 4 與 5 版, 都可完成 APP 安裝測試), 並且啟用 Android Debug Bridge (ADB) 功能, 之後在 Flutter 隨身系統啟動後, 在命令列視窗中執行 adb connect localhost:5555, 就可以直接利用 BlueStacks 作為虛擬手機介面進行 Flutter App 的執行. \n 4) 當 Visual Studio Code 執行時, 目前必須要啟用 IPv4 網路協定才可正常建立 App 並安裝於 BlueStacks 手機介面中, 之後必須再看看是否能夠直接在 IPv6 網路協定下正常運作. \n \xa05) 本次更新後的 Flutter 可攜系統, 總容量為 20GB. 壓縮後的大小則為 GB. \n 下載 Flutter_portable_20210707.7z  (下載 4.7 GB, 解開壓縮後約 20GB) \n 可攜系統中的 Android sdk 容量約 7.5 GB, Flutter 與 Dart 容量約 1.6 GB, Java jdk 容量約 200MB. vscode 約 530 MB, home_mdecourse 目錄下含手機 emulator 檔案容量約 9.3 GB. \n 6) cp2019 網頁中的 Flutter web 範例已經無法執行, dartpad.github.io 網站也必須更新版本. \n 以下為 Flutter 可攜系統所需的啟動設定檔內容: \n REM for flutter\nset java_home=%Disk%:\\java\\jdk8u222-b10\nset ANDROID_SDK_home=%Disk%:\\home_mdecourse\nset GRADLE_USER_home=%Disk%:\\home_mdecourse\nset ANDROID_SDK_ROOT=%Disk%:\\android\\sdk\nset PUB_CACHE=%Disk%:\\home_mdecourse\\pub\n\nREM set _JAVA_OPTIONS=-Duser.home=%HOME%\nset path_flutter=%Disk%:\\android\\sdk\\tools;%Disk%:\\android\\sdk\\tools\\bin;%Disk%:\\android\\sdk\\platform-tools;%Disk%:\\flutter\\bin;%Disk%:\\flutter\\bin\\cache\\dart-sdk\\bin;\n\nset path_vscode=%Disk%:\\vscode; \n', 'tags': '', 'url': '2021.html'}, {'title': 'About', 'text': '身為二十一世紀的機械設計工程師, 由 Dart 入門, 以 Python 建立設計抽象模型 Prototypes, 採用 C 執行機電控制, 然後在 Javascript 的網際與 Flutter 的手機介面中, 運行 Cython 以及 N-API 轉出的核心 C++ 編譯碼, 應該成為基本功. \n 計算機程式建議學習順序 \n 1 ~ 4 為大一上計算機程式課程內容 \n 1. 利用  Dartpad  學習基本\xa0 Dart \xa0語法與  Flutter  應用 \n 配合  Quick Start Guide to Dart Programming \xa0(2020) 與  Beginning App Development with Flutter \xa0(2019)\xa0 電子書章節說明 \n 2. 在  Dartpad  中導入 HTML 與 CSS, 利用 Dart 結合 HTML5 Canvas 繪圖 \n 參考  HTML5 Programmer’s Reference \xa0(2015) 電子書 \n 3. 導入  Dart SDK , 在  SciTE  編輯器中執行\xa0 Dart 程式 \n 參考  SciTE 執行 Dart 程式設定 \n 4. 利用  Dart SDK  中的  dart2js  將 Dart HTML 程式轉為網際程式 \n 參考\xa0  dart2js 編譯器說明 \n 分組程式任務執行示範網站:  https://mdecourse.github.io/cp2019g0 \xa0 \n 5 ~ 6 為大一下網際內容管理課程內容 \n 5. 導入  Flutter SDK , 在  Dartpad  Embedded 環境中練習  Flutter  程式語法 \n 參考  Flutter 按鈕 中的程式說明 \n 6. 利用  Flutter  網際與手機程式作為 GUi 介面, 與遠端的  Flask  Python 程式互動 \n 參考  HTML 程式中的 Python 按鈕 與配合的 Flask 程式碼 \n 7 ~ 9 為大二上電腦輔助設計實習課程內容 \n 7. 利用  Cython  語法編寫遠端  Flask  Python 演算程式庫, 透過  MSYS2  C++ 編譯為動態連結程式庫 \n 參考  Pyslvs  中的機構分析與合成核心程式庫原始碼 \n 8.\xa0 Flask  Python 結合 C++ 動態連結程式庫, 與  Flutter  網際與手機程式互動 \n 9. 在 Dart 網際程式中導入 Javascript 程式庫, 與後端的  Flask  Python 伺服程式互動 \n 10 ~ 12 為大二下協同產品設計實習課程內容 \n 10. 利用後端的  NXOpen for Python  編寫 3D 零組件二次開發  Journal  程式, 與  Flutter  互動 \n 參考 NX12 中的  NXOpen for Python 程式碼 \n 11. 利用  MSYS2  修改編譯  Solvespace  C++ 程式, 加入  WRL  零組件轉出功能 \n 參考  Solvespace 編譯流程說明 \n 12. 將  NX  或  Solvespace  轉出的零組件檔案, 轉入  Webots , 利用  Flutter 、Python 與 C/C++ 進行機電資虛實系統整合設計、模擬與控制 \n 其他: 自學 Computer Science 課程 \n https://functionalcs.github.io/curriculum/ \n 課程工具套件: \n 倉儲:\xa0 https://github.com/mdecourse/cp2019 \n 分組示範倉儲:  https://github.com/mdecourse/cp2019g0 \xa0( 示範網站 ) \n https://dartpad.github.io \xa0( 原始碼 , build 後 倉儲 ) \n dartpad_based.7z \xa0(登入 @gm 帳號後下載 CMSiMDE 相關可攜程式環境) \n flutter_portable_final.7z \xa0 \xa0(登入 @gm 帳號後下載完整的 Flutter 可攜程式環境) \n GitExtensions.7z \n 登入 @gm 帳號後,  下載 Dart for begineer video \n 登入\xa0 @gm 帳號後,  下載上課教學影片 \n 請登入 @gm 帳號後,  填寫選課學員基本資料 \n 電腦輔助設計室與協同設計室行事曆 \n 全頁檢視 \n \n 2019 Fall 學期教育目標: \n 使用可攜程式系統、網際內容管理系統與 Github, 管理各學員與分組學習內容, 同時利用 Dart 程式語言, 設法打造可用於電腦輔助機械設計流程的工具. \n 參考書: \n 1.\xa0Dart for Absolute Beginners (2014) \n https://link.springer.com/book/10.1007/978-1-4302-6482-8 \n 2. Practical Flutter (2019) \n https://link.springer.com/book/10.1007/978-1-4842-4972-7 \n 3.\xa0Beginning App Development with Flutter (2019) \n https://link.springer.com/book/10.1007/978-1-4842-5181-2 \n 4.\xa0Quick Start Guide to Dart Programming (2020) \n https://link.springer.com/book/10.1007/978-1-4842-5562-9 \n 5. 登入 @gm Email 帳號後,  下載計算機程式課程參考書 \n 達成學期教育目標之評量方式與標準: \n 評分比例  (包含學員自評、同組互評與教師評分等三項): \n \n 請注意: \n \n 建議各學員針對課程所指定之作業或課題時, 務必先在個人網頁與網誌登錄相關搜尋結果, 初步完成之個人操作影片, 以及個人擬解決問題的想法後, 再參與分組討論與任務執行. \n 除第一週外, 每位組員必須在次週上課前完成個人倉儲的資料維護, 並至 課程評量表單 完成自評與同組組員互評. \n 任何課程相關問題可以至  Q&A  (需登入) 或 回饋表單  (無需登入) 提出. \n \n \n 學員出席 (10%) \n Github 倉儲與網站管理\xa0 (20%) \n 任務執行 (40%) \n 亂數分組與應用 \n 靜態繪圖與應用 \n 動態繪圖與應用 \n 程式開發 (30%) \n 評分方式: \n 計算機程式每週自評與互評表單:   https://forms.gle/hztfjHLkrAaLyntv6 \n 教學方式: \n 課堂講授 \n 操作錄影 \n 學員實習 \n 分組報告', 'tags': '', 'url': 'About.html'}, {'title': '課程簡介', 'text': '\n \n \n 說明課程進行方式: \n 實際操作示範並利用  ShareX  拍攝成 mp4 供學員參考 \n 學員將上課操作影片整理成帶字幕 (透過  Aegisub ,  Avidemux , 以及  Openshot ) 的教學影片, 並嵌入個人網頁 \n 每週提供助教時間 (週四晚上 19:30-21:30), 可執行上機練習、磁區內容重整與學員問題解答 \n 分組解決指定問題時, 分為組員個人之心得整理, 與所有組員協同研討之結論 \n 評分方式: \n 依照組員自評、互評與教師評分綜合進行計分 \n 課程目標: \n 使用可攜程式系統、網際內容管理系統與 Github, 管理各學員與分組學習內容, 同時利用 Dart 程式語言, 設法打造可用於電腦輔助機械設計流程的工具. \n 網路連線: \n 為了能夠利用廣域網路搜尋資料, 進行協同設計, 各學員在電腦輔助設計室使用電腦, 最重要的設定除了開機就是上網. \n 由於 IPv4 協定的網路連線受限於單一外部 IPv4 位址的限制, 導致上網頻寬受到限制, 因此在儘可能的情況下, 將使用 IPv6 協定上網. ( IPv4 與 IPv6 網路協定差異.pdf ,  比較 IPv4 與 IPv6 ) \n 儘管透過純 IPv6 協定上網有許多好處, 但是部分網站 (例如:  https://github.com )\xa0尚未支援 IPv6 協定連線, 因此在電腦輔助設計室以純 IPv6 協定上網後, 必須根據各種不同的連線協定 (例如: 瀏覽器的 html 協定, python pip 模組安裝, git http 與 git ssh 連線) 設定不同的雙支援代理主機. \n 另外, 在各組員獨立開發程式的過程, 可以全程在單機環境與區域網路連線下利用  Virtualbox  虛擬主機模擬遠端伺服器的情況下執行各項任務, 以  Fossil SCM  代替 Github\xa0 進行分散式版次管理, 只有在需要將所完成的倉儲版本送到 Github\xa0 時才需要連線上廣域網路. \n 程式開發架構: \n 利用\xa0  Virtualbox  安裝\xa0pyslvs, uwsgi, fossil_scm 以及 squid 伺服器的  Ubuntu 18.04.vdi 下載 \xa0(12GB) 後, 就可以在 Windows 10 環境下配置虛擬的  CMSiMDE  動態主機、 Fossil SCM  伺服器、 Pyslvs  、 V-rep  、 Webots  套件與  Squid  代理主機. \n 此一架構的程式開發標的, 即是要結合近端的瀏覽器、手機、平板介面與各種伺服器, 整合成一套機電資軟硬體系統, 前端的程式套件主要利用  Dart  開發, 負責擷取設計參數 (包含文字與數字內容, 以及靜態與動態影像等), 而後端的伺服器則包含 C/C++/Python ( Cython ) 程式所開發的 CAD/CAE/CAM 機械設計運算核心.\xa0 透過數學運算與機械設計製造原理分析後, 將結果送回前端的使用者介面, 或依照前端介面的參數指示, 進行後端機電資實體系統的作動. \n 範例: \n http://mde.tw/cad2019/content/Task1.html \xa0中利用瀏覽器連線到 Python 與  Flask  框架所建立的伺服器程式後, 可以滑鼠點擊前後左右圖像, 從伺服器的特定埠號送出控制訊號, 用來控制遠端  V-rep  模擬系統中的行走車. \n 本課程的目標之一, 就是希望利用  Dart  開發出能夠取代上列 Python 前端程式介面, 並延伸至手機與平板介面, 以便更有效對虛擬或實體的機電資系統進行控制或雙向資訊互動. \n \n', 'tags': '', 'url': '課程簡介.html'}, {'title': 'Design Theory', 'text': '如何學習"設計"? \n 1. 首先必須了解如何利用" 概念推理 " (Conceptual Resoning) 解決問題, 意即以事物的 抽象化思考  (Abstract Thinking), 透過 反思  (Reflection, 反覆自我檢驗 思考流程 與 立論基礎 的合理性與正確性) 激盪產生創新思維並逐步解決問題. \n 2. 在推理的過程, 提供 解題工具 與 解題範例 , 說明如何透過概念推理解決問題. \n 3. 創意思維不可畫地自限, 必須學習利用 組織分工 、 協調 與 合作 進行解題. \n 4. 設計流程必須 合乎邏輯 並強調 績效 , 學習如何透過 管理流程 善用資源. \n 5. 學習設計的過程, 必須充分了解 現代發展趨勢 、 創新工具的用途 與事物的 動態 特性, 積極融入國際專 業社群 ,  持續貢獻 心力. \n 結論: \n 培養解題思維  - 從自我周遭的問題解決作為開端 \n 創造解題工具  - 為了解決問題而開發出獨特工具 \n 強調協同分享  - 在學習群組中互相砥礪分享學習成果 \n 合理自評互評  - 透過具體績效的呈現執行評量 \n 積極融入社群  - 持續關注國際專業趨勢發展, 為生態社群做出貢獻 \n 參考資料: \n Design Theory \xa0(登入 @gm 帳號後 下載 2017_Design_Theory.pdf )', 'tags': '', 'url': 'Design Theory.html'}, {'title': 'Abstract Thinking', 'text': 'Abstract thinking (抽象思維) is the ability to think (思考能力) about objects (物件), principles (原理), and ideas (想法) that are not physically present (實體存在). It is related to symbolic thinking (代號思維), which uses the substitution of a symbol for an object or idea (利用符號取代物件與想法). \n WHAT IS ABSTRACT THINKING? \n A variety of everyday behaviors constitute abstract thinking. These include: \n \n Using metaphors (隱喻) and analogies (類比) \n Understanding relationships between verbal (可表述) and nonverbal (不可表述) ideas (想法) \n Spatial reasoning (空間推理) and mentally manipulating (智能操控) and rotating objects (對於物件之智能轉化認知) \n Complex reasoning (複雜推理), such as using critical thinking (批判思維), the scientific method (科學方法), and other approaches to reasoning through problems (針對問題所提出的推理方法) \n \n Abstract thinking makes it possible for people to exercise creativity (發揮創造力). Creativity, in turn (反而言之), is a useful survival mechanism\u2060 (生存之道)—it allows us to develop tools (開發工具) and new ideas (發展出新的想法) that improve the quality of human life (改善人的生活品質). \n References: \n https://www.goodtherapy.org/blog/psychpedia/abstract-thinking \n http://www.projectlearnet.org/tutorials/concrete_vs_abstract_thinking.html \n https://www.healthline.com/health/abstract-thinking \n', 'tags': '', 'url': 'Abstract Thinking.html'}, {'title': 'Computer Algorithms', 'text': 'http://www.csie.ntnu.edu.tw/~u91029/ \n', 'tags': '', 'url': 'Computer Algorithms.html'}, {'title': '課程表單', 'text': '計算機程式每週自評與互評表單: \xa0 https://forms.gle/hztfjHLkrAaLyntv6 \xa0(必須登入 @gm 帳號) \n 計算機程式課程 Q and A  (需登入 Github 帳號) \n 課程回饋表單 \xa0 (無需登入) \n', 'tags': '', 'url': '課程表單.html'}, {'title': 'Windows Notebook', 'text': '上課學員登入 @gm 電子郵箱後, 所下載的\xa0 dartpad_based.7z \xa0與\xa0 flutter_portable_final.7z \xa0適用於在公共的 Windows 10 64 位元電腦上使用. \n 針對使用 Windows 筆記型電腦上課的學員, 則可以自行安裝 Python, 7zip, SciTE, Portable, OpenJDK, Flutter SDK, ShareX, Process Explorer, Zoom it, Tiny C 以及 Visual Studio Code 等套件. \n 並且利用 pip 安裝 flask, bs4, lxml, pelican, markdown, flask_cors, leo 等模組. \n 安裝 Git: \n https://git-scm.com/download/win \n 安裝 Python3 (含 pip): \n https://www.python.org/downloads/ \n 安裝 CMSiMDE 所需模組: \n pip install flask bs4 lxml pelican markdown flask_cors leo \n 安裝 OpenJDK: \n https://java.tutorials24x7.com/blog/how-to-install-openjdk-12-on-windows \n 安裝 Flutter: \n https://flutter.dev/docs/get-started/install/windows \n 安裝\xa0 Android-SDK-Tools: \n https://developer.android.com/studio#downloads \n 安裝 Bluestacks: \n https://www.bluestacks.com/ \n 安裝 VSCode: \n https://code.visualstudio.com/download \n 開啟 VSCode\xa0 後,\xa0 利用下拉式表單 Code\xa0 ➤ Preferences\xa0➤ Extensions 搜尋 Flutter Extensions 並完成安裝 \n Flutter Android 手機程式開發: \n 開啟 VSCode 與\xa0Bluestacks \n 利用 Android SDK platform-tools 目錄中的 adb.exe, 執行 \n \xa0 adb connect localhost:5555 \n  讓電腦中的 VSCode Flutter 手機程式專案, 可以透過內定的 5555 埠號, 將執行結果呈現在 localhost 電腦開啟的 Bluestacks 畫面中. \n 在 VSCode\xa0 套件中, 利用 Ctrl + Shift + P 開啟 Project 表單, 選擇 Flutter: New Project 建立專案 \n 選擇儲存 Flutter Project 的目錄 \n Counter Demo 專案開啟後, 利用下拉式表單 Debug\xa0➤ Run Without Debugging\xa0 完成專案編譯, 並在\xa0Bluestacks\xa0手機介面中執行.', 'tags': '', 'url': 'Windows Notebook.html'}, {'title': 'Ubuntu Notebook', 'text': '因為\xa0 Ubuntu 18.04 同時內建 Python 2.7 與 Python 3.6, 在執行本課程 CMSiMDE 時必須使用 python3\xa0 安裝 flask, bs4, lxml, pelican, markdown, flask_cors, leo 等模組. 使用者必須自行安裝 git 但必須注意所使用的版本. \n 安裝 Python3 模組: \n sudo pip3 install flask bs4 lxml pelican markdown flask_cors leo \n 安裝 OpenJDK: \n sudo apt-get install openjdk-8-jdk \n 安裝 Flutter SDK \n https://www.techomoro.com/how-to-install-and-setup-flutter-on-ubuntu-18-04-1-lts-bionic-beaver/ \n 安裝 Visual Studio Code: \n https://dzone.com/articles/install-visual-studio-code-on-ubuntu-1804 \n 安裝 Android SDK Tools: \n https://developer.android.com/studio#downloads \n 安裝\xa0 Android Simulator: \n https://docs.anbox.io/userguide/install.html \n', 'tags': '', 'url': 'Ubuntu Notebook.html'}, {'title': 'Mac Notebook', 'text': '初學者參考手冊: \n 1. Mac OS X for Absolute Beginners \n https://link.springer.com/book/10.1007/978-1-4842-1913-3 \n 2.\xa0Quick Start Guide to Dart Programming (2020) \n https://link.springer.com/book/10.1007/978-1-4842-5562-9 \n 3. Practical Flutter (2019) \n https://link.springer.com/book/10.1007/978-1-4842-4972-7 \n 4.\xa0Beginning App Development with Flutter (2019) \n https://link.springer.com/book/10.1007/978-1-4842-5181-2 \n 為 Python3 安裝 pip: \n 利用 python3 python3 與  get-pip.py  安裝 pip. \n sudo python3 get-pip.py \n 利用 Mac App Store 安裝 XCode: \n https://apps.apple.com/tw/app/xcode/id497799835?mt=12 \n 安裝 CMSiMDE 所需模組: \n 利用 pip 安裝 flask, bs4, lxml, pelican, markdown, flask_cors, leo \n sudo pip install flask bs4 lxml pelican markdown flask_cors leo \n 安裝 Homebrew: \n /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" \n 利用 Homebrew 安裝 OpenJDK: \n brew tap AdoptOpenJDK/openjdk brew cask install adoptopenjdk8 \n 安裝 Flutter: \n https://flutter.dev/docs/get-started/install/macos \n 利用 Homebrew 安裝 VSCode: \n brew update brew cask install visual-studio-code \n 透過 XCode 使用 iOS Simulator: \n 利用\xa0\xa0Xcode ➤ Open Developer Tool ➤ Simulator 開啟 iOS Simulator \n Flutter iOS 手機程式開發: \n 開啟 VSCode 與 iOS Simulator \n 利用下拉式表單 Code\xa0 ➤ Preferences\xa0➤ Extensions 搜尋 Flutter Extensions 並完成安裝 \n 利用 Command + Shift + P 開啟 Project 表單, 選擇 Flutter: New Project 建立專案 \n 選擇儲存 Flutter Project 的目錄 \n Counter Demo 專案開啟後, 利用下拉式表單 Debug\xa0➤ Run Without Debugging\xa0 完成專案編譯, 並在 iOS Simulator 手機中執行.', 'tags': '', 'url': 'Mac Notebook.html'}, {'title': 'Mac SSH 連線', 'text': '假如之前已經使用 https 對 Github push, 可能連線 github.com 的帳號與密碼已經存在 Go Untility Keychain Access 中, 要改為 SSH 對 Github push, 需要先刪除存入 Keychain Access 中的 github.com Certification 設定. \n 倉儲 .git 目錄中的 config: \n 從 https 連線改為 SSH 連線: \n [remote "origin"]  #url = https://github.com/mdecourse/cp2019.git  url = git@github.com:mdecourse/cp2019.git \n 建立 OpenSSH 格式的 key pair: \n ssh-keygen -t rsa -b 4096 -C "使用者學號" 將 id_rsa 存入內定的 ~/.ssh 目錄中. \n 透過 Proxy Serve r連線: \n ssh USER@FINAL_DEST -o "ProxyCommand=nc -X connect -x PROXYHOST:PROXYPORT %h %p" \n 以\xa0 IPv6 連線到 github.com 為例: \n .ssh/config 設定為: \n ProxyCommand nc -X connect -x [2001:288:6004:your::proxy_server]:3128 %h %p   Host github.com  User git  Port 22  Hostname gitlab.com \n 其中 connect 表示使用 HTTPS_PROXY 連線, 內定則為 5 表示透過 SOCKS Version 5 連線. \n https://ss64.com/osx/nc.html \n \n', 'tags': '', 'url': 'Mac SSH 連線.html'}, {'title': '亂數分組', 'text': '流程圖符號 \n \n 上課第一週即進行學員亂數分組, 計算機程式的實際應用與程式對應語法的介紹, 將從此一程式的開發啟動 \n 基本流程: \n 取得各班修課程成員的學號資料 \n 決定每組幾人 \n 將學員學號資料的次序弄亂 \n 依據每組幾人, 從頭開始分組, 以確定各組成員 \n 若最後一組人數過少, 將分別依序捕到前述已經分組的組別中 \n 在課程加退選階段結束後, 各組再清算所餘人數是否得當, 不排除重新分組 \n 各班檢討是否整個學期只分組一次, 或分組兩次, 或更多次的優缺點, 依據討論結果進行後續課程任務分組 \n 為何使用 Python? \n If you do much work on computers, eventually you find that there’s some task you’d like to automate. For example, you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch of photo files in a complicated way. Perhaps you’d like to write a small custom database, or a specialized GUI application, or a simple game. \n If you’re a professional software developer, you may have to work with several C/C++/Java libraries but find the usual write/compile/test/re-compile cycle is too slow. \n Perhaps you’re writing a test suite for such a library and find writing the testing code a tedious task. Or maybe you’ve written a program that could use an extension language, and you don’t want to design and implement a whole new language for your application. \n Python is just the language for you. \n 首先我們將採用 Python 進行亂數分組, 各分組也可以研究看看, 假如採用 C, C++, Java, Javascript, Lua 或 Dart 進行類似的工作, 該如何進行? \n 是直接在命令列中執行, 寫一個配合的 GUI, 在網頁介面中執行, 或者在手機或平板上執行? 各有何種應用情境?\xa0 \n 近端資料讀取亂數分組程式 \n import random\nfilename = \'cdaw1_student_list.txt\'\n# 每組人數\nnum_in_one_group = 8\n# 組序由 1 開始\ngroup = 1\n# 各班分組後所得數列\nc2019 = []\nwith open(filename) as f:\n    # 讀進全部檔案, 轉進數列, 並同時將各行的 \\n 去除\n    read_data = f.read().splitlines() \nprint("共有 " + str(len(read_data)) + " 位學員")\n# 利用 shuffle 將數列隨機弄亂\nrandom.shuffle(read_data)\nfor i in range(len(read_data)):\n    # 利用整數相除的餘數進行分組\n    if i%num_in_one_group == 0:\n        # 列出分隔符號\n        print("-"*20)\n        print("group " + str(group) +":")\n        # 在分組區隔時重置各組學員數列\n        group_list = []\n        print()\n        # 同時列出與分隔標註對應 i 的數列內容\n        print(read_data[i])\n        group_list.append(read_data[i])\n        group = group + 1\n    else:\n        # 逐一列出同組的其他學員\n        print(read_data[i])\n        group_list.append(read_data[i])\n    if i%num_in_one_group == 0:\n        c2019.append(group_list)\n# c2019 為該班分組後所得分組數列\nprint(c2019) \n 從網站讀取資料亂數分組程式 \n import random\nimport urllib3\n\ntarget_url = "https://raw.githubusercontent.com/mdecourse/cd2019/gh-pages/data/cda/cdaw1_student_list.txt"\n\n# 從 url 讀取資料, 之後利用 splitlines() 存入學員學號字串數列中\nhttp = urllib3.PoolManager()\nresponse = http.request(\'GET\', target_url)\ndata = response.data.decode(\'utf-8\')\nread_data = data.splitlines() \n#print(read_data)\n\n# 每組人數\nnum_in_one_group = 10\n# 組序由 1 開始\ngroup = 1\n# 各班分組後所得數列\nc2019 = []\nprint("共有 " + str(len(read_data)) + " 位學員")\n# 利用 shuffle 將數列隨機弄亂\nrandom.shuffle(read_data)\nfor i in range(len(read_data)):\n    # 利用整數相除的餘數進行分組\n    if i%num_in_one_group == 0:\n        # 列出分隔符號\n        print("-"*20)\n        print("group " + str(group) +":")\n        # 在分組區隔時重置各組學員數列\n        group_list = []\n        print()\n        # 同時列出與分隔標註對應 i 的數列內容\n        print(read_data[i])\n        group_list.append(read_data[i])\n        group = group + 1\n    else:\n        # 逐一列出同組的其他學員\n        print(read_data[i])\n        group_list.append(read_data[i])\n    if i%num_in_one_group == 0:\n        c2019.append(group_list)\n# c2019 為該班分組後所得分組數列\nprint(c2019) \n 為何使用 Dart? \n 因為 Dart 是具有潛力, 而且能夠適應未來可攜裝置與 IOTs 整合環境變化應用的程式語言. \n 使用 Dart 執行亂數分組: \n https://dartpad.dev/embed-dart.html?id=9f69e77cb456b97cccc8eb5a9dbd991c \n 結合  gist  與  dartpad.dev , 也可以從\xa0 https://dartpad.github.io  右上方 Samples 選擇亂數分組程式執行. \n', 'tags': '', 'url': '亂數分組.html'}, {'title': 'FFmpeg', 'text': 'FFmpeg 手冊:  http://ffmpeg.org/ffmpeg.html \n 擷取 mp4 片段檔案 \n 從 origin.mp4 影片中的第一秒開始, 切出 15 分鐘的影片, 存為 new.mp4 \n ffmpeg -i origin.mp4 -ss 00:00:01 -t 00:15:00 -async 1 new.mp4 \n 刪除影片中的聲音資料 \n ffmpeg -i origin.mp4 -c copy -an new.mp4 \n 合併 mp4 檔案 \n 建立 allmp4.txt 內容為 file \'/path/to/1.mp4\' file \'/path/to/2.mp4\' file \'/path/to/3.mp4\' \n 將 1.mp4, 2.mp4 與 3.mp4 合併為 new.mp4 \n ffmpeg -f concat -i allmp4.txt -c copy new.mp4 \n 影片中加入字幕 \n 利用  http://www.aegisub.org/  可攜版本工具加入字幕 \n 直接將 input.srt 字幕資料 burn 入 input.mp4 \n ffmpeg -i input.mp4 -vf subtitles=input.srt output.mp4 \n 影片畫面中座標 x=5, y=950 位置中加入圖檔 \n \n ffmpeg -i input.mp4 -i kmol_102x30_color.png -filter_complex "overlay=5:950" output.mp4 \n 其他圖形化工具: \n http://www.aegisub.org/ \xa0(Font: SimSun, Size: 40, Bold, Primary, Color (255, 200, 5)) \n http://www.avidemux.org/nightly/win64_support/ \xa0(建立使用 2.6.21 版本, 可與 aegisub 配合使用) \n https://www.openshot.org/ \xa0(必須分段輸入字幕, 無法與 aegisub 配合使用) \n 請登入 @gm 電子郵箱後, 下載  aegisub_avidemux_openshot.7z \n \n \n', 'tags': '', 'url': 'FFmpeg.html'}, {'title': 'QandA', 'text': '與計算機程式課程有關的問題, 請登入 Github 帳號後, 在\xa0 https://github.com/mdecourse/cp2019/issues/4 \xa0中提出. \n 其他與課程相關的建議, 請填寫 課程回饋表單 \xa0 (無需登入). \n 教育版軟體下載: \n 在校區內所使用的電腦 (若只需下載 .iso 可以設定系上提供的 Proxy\xa0 server 後下載), 可以透過\xa0 https://software.nfu.edu.tw/ \xa0取得各項教育版軟體, 其中包括 Windows 操作系統與 MS Office 以及 AutoDesk 教育版相關套件. \n Windows 10 1809.iso \xa0 \xa0\xa0  kms.bat \xa0(每半年認證, 若在校外必須透過  VPN  連線後進行) \n Office 2016.iso \xa0 \xa0  kms.bat \xa0 (每半年認證, 若在校外必須透過 \xa0 VPN \xa0 連線後進行) \n AutoDesk PDSU.iso \xa0(利用 @gm 電子郵箱驗證後, 取得學生版三年使用授權) \n 當使用者位於校區外, 希望連線使用校區內的相關電腦資料, 包括下載教育版軟體或使用各項電子期刊或電子書, 可以利用\xa0 https://nfucc.nfu.edu.tw/zh/download/download-network/ssl-vpn \xa0連線後使用. \n 在 Windows 環境下, 可以採用 setup_proxy.reg 組態檔案設定 Proxy Server: \n Windows Registry Editor Version 5.00\n \n[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings] \n"MigrateProxy"=dword:00000001 \n"ProxyEnable"=dword:00000001 \n"ProxyHttp1.1"=dword:00000000 \n"ProxyServer"="http://140.130.17.7:3128"\n"ProxyOverride"="192.168.*;*.edu.tw" \n 然後以 disable_proxy.reg 去除 Windows 操作系統 Proxy Server 的設定: \n Windows Registry Editor Version 5.00\n \n[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings] \n"ProxyEnable"=dword:00000000 \n \n', 'tags': '', 'url': 'QandA.html'}, {'title': 'USB 隨身碟', 'text': '本課程建議使用隨身碟儲存所有與課程相關的倉儲或網頁資料, 也可只將與個人設定相關及倉儲存放在 USB 隨身碟中. \n 注意: 將資料存入 USB 隨身碟之前, 務必檢查所使用格式化的規格, 一般出廠 USB 格式化仍採用  FAT32  格式, 之後將無法存放大於 4GB 的檔案, 因此建議使用之前將 USB 隨身碟格式化為  exFAT  格式. \n USB 存放整個可攜系統 \n 優點: \n 可以自行配置安裝系統中的模組 \n 缺點: \n 執行速度比硬碟慢 \n USB 只存放設定與自我倉儲 \n 優點: \n 執行速度較全部存入 USB 快 \n 缺點: \n 其他用戶對硬碟系統資料更動後, 使用上會受影響. \n start.bat 啟動設定檔案: \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\n%Disk%:\n\nREM 設定所使用的硬碟目錄\nREM set CDisk=G:\\201906_fall\\data\nset CDisk=%Disk%:\\cad\\201906_fall\\data\nREM set DDisk=D:\\flutter_portable_final\\data\nset DDisk=%Disk%:\\cp\\flutter_portable_final\\data\n\nset HomePath=%Disk%:\\home_cadlab\nset HomeDrive=%Disk%:\\home_cadlab\nset Home=%Disk%:\\home_cadlab\nset USERPROFILE=%Disk%:\\home_cadlab\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%CDisk%\\py373\\DLLs;%CDisk%\\py373\\Lib;%CDisk%\\py373\\Lib\\site-packages;\nset PYTHONHOME=%CDisk%\\py373\n\nREM for flutter\nset java_home=%DDisk%\\java\\jdk8u222-b10\nset ANDROID_SDK_home=%DDisk%\\home\nset GRADLE_USER_home=%DDisk%\\home\nset ANDROID_SDK_ROOT=%DDisk%\\android\\sdk\nset PUB_CACHE=%Disk%:\\home\\pub\n\nREM for putty\nset GIT_HOME=%CDisk%:\\portablegit\\bin\\\nset GIT_SSH=%Disk%:\\putty\\plink.exe\n\nREM set _JAVA_OPTIONS=-Duser.home=%HOME%\nREM %DDisk%\\home\\pub\\bin is for webdev\nset path_flutter=%DDisk%\\android\\sdk\\tools;%DDisk%\\android\\sdk\\tools\\bin;%DDisk%\\android\\sdk\\platform-tools;%DDisk%\\flutter\\bin;%DDisk%\\flutter\\bin\\cache\\dart-sdk\\bin;%Disk%:\\home\\pub\\bin;\n\nset path_python=%CDisk%\\py373;%CDisk%\\py373\\Scripts;\nset path_msys2=%CDisk%\\msys64\\mingw64\\bin;\nREM coreutils is for compiling fossil scm\nset path_coreutils=%CDisk%\\coreutils-5.3.0\\bin;%CDisk%\\depends22_x64;\nset path_tcc=%CDisk%\\tcc;\nset path_cmake=%CDisk%\\cmake-3.10.1-win64-x64\\bin;\nset path_nodejs=%CDisk%\\nodejs;%CDisk%\\nodejs\\appdata\\roaming\\npm;\nset path_git=%CDisk%\\portablegit\\bin;\nset path_xming=%CDisk%\\Xming;\nset path_latex=%CDisk%\\Pandoc;%CDisk%\\TinyTeX\\bin\\win32;\nset path_vscode=%DDisk%\\vscode;\nset path_depot=%DDisk%:\\buildtools;\nset path_putty=%Disk%:\\putty;\nset path_webots=%Disk%:\\Webots_2019b_rev1\\msys64\\mingw64\\bin;%Disk%:\\Webots_2019b_rev1\\msys64\\usr\\bin\n\npath=%Disk%:;%path_depot%;%path_python%;%path_msys2%;%path_tcc%;%path_git%;%path_cmake%;%path_coreutils%;%path_flutter%;%path_vscode%;%path_putty%;%path_webots%;%path%;\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %CDisk%\\wscite415\\wscite\\SciTE.exe\nstart /MIN %CDisk%\\wscite415\\wscite\\SciTE.exe\n\nREM start_webots.bat\n\nExit \n stop.bat 關閉程式檔案: \n @echo off\nset Disk=y\npath=%PATH%;\n\ntaskkill /IM python.exe /F\ntaskkill /IM pythonw.exe /F\ntaskkill /IM node.exe /F\ntaskkill /IM Range.exe /F\ntaskkill /IM SciTE.exe /F\ntaskkill /IM adb.exe /F\ntaskkill /IM code.exe /F\ntaskkill /IM java.exe /F\n\nREM 終止虛擬硬碟與目錄的對應\nsubst %Disk%: /D\nREM 關閉 cmd 指令視窗\ntaskkill /IM cmd.exe /F\nEXIT \n 請注意: \n 因為開啟 code 後所需先前的相關 Flutter 專案, 會將與 Android 相關, 取得的 package 放在 PUB_CACHE (即 y:\\home\\pub), 以及\xa0 .android (即 y:\\home\\.android) 目錄中, 因此搬遷資料時必須同時複製此一目錄內容. 且轉移系統設定時, 必須查驗各 .bat 中所使用的 dart sdk 所在位置. \n 而且需要建立 y:\\home\\AppData\\Roaming 目錄, 以便存放 vscode 啟動後的 logs 檔案. \n 另外, 利用 putty 與 plink 對 Github 以 ssh 連線時, putty 將 session 存入 Windows 10 的系統組態中 (條件一) , 且 git 從環境變數 GIT_SSH 中確認 (條件二) plink.exe 位置, 最後再結合 y:\\home\\.ssh\\config (條件三) 與各倉儲 .git 目錄中的 config 連線 url 設定 (條件四) 完成倉儲版次推送, 因此流程中必須確認此四個條件是否彼此吻合. \n 條件一: putty 的 github.com session 設定是否使用正確的 RSA key 格式 (利用 puttygen.exe 轉換 Github 所使用的 OpenSSH keys) (參考用  putty_home_reg.7z ) \n 條件二:\xa0 啟動時 GIT_SSH 環境變數設定 \n REM for putty\nset GIT_HOME=%CDisk%:\\portablegit\\bin\\\nset GIT_SSH=%Disk%:\\putty\\plink.exe \n 條件三: y:\\home\\.ssh\\config 使用代理程式設定 \n # no proxy at home\n#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p\n# set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup\nProxyCommand y:/putty/plink.exe github.com %h %p\n \nHost github.com\n    User git\n    Port 22\n    Hostname github.com\n    \n    # for connect.exe need openssh key format\n    #IdentityFile "y:\\home\\.ssh\\id_rsa_mdecourse"\n    # for plink.exe need rsa key format but set under putty github.com session\n    # plink.exe do not need the following setting\n    #IdentityFile "y:\\home\\.ssh\\mdecourse_putty_private.ppk"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes \n 條件四: 各倉儲中 .git 目錄中 config url 連線方式設定 \n [remote "origin"]\n    #url = https://github.com/mdecourse/cp2019.git\n    url = git@github.com:mdecourse/cp2019.git \n \n', 'tags': '', 'url': 'USB 隨身碟.html'}, {'title': 'USB 程式系統', 'text': '如何利用  Virtualbox  建立虛擬主機: \n \n 背景知識 \n \n 2019 年 Fall 計算機程式系統的前半段, 只要能上網, 各學員可以直接在  https://dartpad.github.io  上寫程式, 寫完後則利用 Github 帳號上的  Gists  儲存並引用 Dart 網際程式.\xa0 \n 但是利用  Github Pages  建立個人的網頁時, 近端仍需要能夠執行  Git  功能, 能夠編輯文字檔案或程式檔案, 並且需要 Python3 程式環境, 並且對 Python3 安裝  flask ,  bs4 ,  lxml ,  pelican ,  markdown  以及  leo  等模組. \n 因為各學員建立網頁用的  https://github.com/mdecourse/cmsimde \xa0網際內容管理程式, 採用 Python  Flask  網際框架編寫, 而且使用 bs4 解讀網頁標註, 而且透過 lxml 將動態 html 內容轉為靜態內容, 因此要在近端利用 CMSiMDE 的動態系統編輯內容, 且轉為只含 html, javascript 以及 css 的靜態網頁, 近端程式環境就需要 Python3 加上 flask, bs4 以及 lxml 模組. (為了讓 CMSiMDE 可以跨網域存取資料, 又加上 flask_cors 模組) \n 至於 Python3 中的 pelican 與 markdown 主要在 CMSiMDE 網際內容管理系統中, 建立網誌用, 而管理 CMSiMDE 中的網誌與網際投影系統 - reveal.js, 則需要 Leo 大綱編輯器, 因此 Python3 除了必須安裝 flask, bs4, lxml 模組外, 還需要安裝 pelican, markdown 以及 leo 模組. \n \n 建立隨身碟程式系統 \n \n dartpad_based.7z \xa0(登入 @gm 帳號後下載, 210 MB 解開壓縮後約 900 MB) 就是根據上述的背景知識, 在純 Python 環境中安裝各相關模組之後, 再利用  Portablegit  作為執行 Git 指令的系統. \n 建立隨身碟程式系統的第一步就是確認隨身碟所使用的規格, 假如不是採用 extFAT 格式化, 之後將無法儲存大於 4GB 的單一 檔案, 這裡所建議的 USB 容量是至少 128 GB USB3.0 以上規格的隨身碟, 並且已經格式化為 extFAT 規格. \n 只要下載\xa0 dartpad_based.7z , 在隨身碟中解開即可 (為了使用最新版的 CMSiMDE, 必須利用 python -m pip install flask_cors 安裝 flask_cors 模組), 接下來就可以從隨身碟以 start.bat 開啟隨身程式系統, 以 stop.bat 退出系統後, 再利用 Windows 10 操作系統中的退出隨身碟指令, 就可以取出隨身碟離開. \n 接下來各學員的任務就是充分了解 start.bat 以及 stop.bat 的設定, 並且熟悉有關利用 https 與 ssh 對 Github 倉儲連線的相關設定, 並且能夠在 IPv4 與 IPv6 環境下配合修改相關 Proxy 伺服器的設定, 以及各 git config 與倉儲提交身分綁定相關細節, 就可以在每週根據教學進度, 利用\xa0  https://dartpad.github.io \xa0\xa0以及  Github Gists  連結內容, 更新自己的網站. \n \n 相關議題 \n \n 為什麼 USB 隨身碟需要儲存單一檔案大於 4GB 的資料? \n 因為若使用  Virtualbox  建立\xa0 Windows 10 虛擬主機進行相關測試, 最小的單一檔案將大於 10GB. \n 另外, 利用 Ubuntu 18.04 三個階段的虛擬主機檔案, 從純系統的 2GB 起, 安裝 X-Win 之後就會超過 4GB, 因此將 128 GB 的隨身碟以 extFAT 格式化是必要的. \n Windows 10 64 位元.vmdk 下載  (10GB) \n 純  Ubuntu 18.04.vdi 下載 \xa0(2GB) \n 安裝  Mate 桌面的 Ubuntu 18.04.vdi 下載 \xa0(7GB) \n 安裝  pyslvs, uwsgi, fossil_scm 以及 squid 伺服器的 Ubuntu 18.04.vdi 下載 \xa0(12GB) \n 為什麼 USB 隨身碟中的可攜程式環境可能需要有多個啟動 start.bat 環境? \n 由於每一個電腦使用環境各有不同的網路架構與設定, 因此在電腦輔助設計室與其他不同電腦使用地點, 為免除多次修改 home 目錄下的 .gitconfig 以及 home\\.ssh 目錄下的 config 檔案設定, 最佳的因應方法為: 在不同電腦使用環境時, 啟動因應該地點配置的啟動 start.bat 與 home 設定內容. \n 在此必須注意的是, 不同的 start.bat 可能指到不同的 home 目錄, 而在  Flutter  手機開發流程中,  pub  將相關資料存入可攜系統 home 中的 pub 目錄, 可能造成此目錄容量達 1GB, 若在不同 start.bat 與 home 設定下都需要進行  Flutter  手機程式開發, 將需要較大容量的 USB隨身碟. \n 如何將 Dart 網際程式寫在 Gists, 如何利用  https://dartpad.github.io  引用? \n 各學員登入 Github 之後, 從右上方下拉式功能表點選 Your Gists, 即進入個人的 Gist 區, 再點選右上方的 + 號, 就可以新增 Gist 資料, 其中可以包含 .dart, .html 與 .css 等三種檔案, 新增後即可以取得各筆 Gist 的編碼. \n 要在 Dartpad 中引用, 只需將各 Gist 檔案的編碼, 在  https://dartpad.github.io \xa0\xa0中加上 ?id=編號, 例如: 引用 Gist 編號為\xa060ad22240eb79d2b25e2ea1bcdd8f0c6 的 Dart 程式範例, 為\xa0\xa0 https://dartpad.github.io?id=60ad22240eb79d2b25e2ea1bcdd8f0c6\xa0 \xa0 \n 以 SSH 協定維護 Github 倉儲的考量. ( 下載 putty.7z  SSH 連線工具組) \n Github 倉儲的維護提供 HTTPS 與 SSH 等兩種連線模式, 使用 HTTPS 時需要在 push 時輸入帳號與密碼, 而 SSH 連線則採用公私鑰配對的方式進行認證. \n 當使用 SSH 協定維護 Github 倉儲時, 則必須注意 portablegit 所提供的 connect.ext, 因此其\xa0 https://github.com/git/git/blob/master/connect.c \xa0目前無法使用 IPv6 代理主機連線, 因此若在純 IPv6 模式下, 必須改採  Putty/Plink  與  Git  結合的方式進行. \n 希望在純 IPv6 模式下, 使用 IPv6/IPv4 雙支援的代理主機對 Github 連線, 必須注意三項要點: \n 要點1: 啟動時將 GIT_SSH 環境變數設為 y:\\putty\\plink.exe, Git 指令啟動時, 就會使用 plink.exe 以 ssh 模式對 Github 倉儲連線. \n 要點2: Github 的 SSH 與 GPG keys 設定只接受  OpenSSH  \xa0格式的 public key 輸入, 但是近端的\xa0 Git 指令若透過 putty 的 plink.exe 連線, 則只接受  RSA  格式的 key 格式認證. 因此近端 putty 的 AUTH 設定, 必須先將 OpenSSH 格式的 keys 利用 putty 工具組中的 puttygen.exe 轉為  RSA  格式後才能使用. \n 要點3: Putty 將設定存在 registry,\xa0 Computer\\HKEY_CURRENT_USER\\Software\\SimonTatham, 而且 plink.exe 可以使用 putty.exe 的 session 設定, 因此若要採用 IPv6 proxy 設定, 是以 github.com 為 putty 的 session 名稱, 然後指定 SSH 設定下的 Auth 指定 private key, 並在 PROXY 設定所使用的 HTTP 協定代理主機. 當 putty 設定 github.com session 完成後, 必須以 git 為帳號連線一次, 以便將 github.com 網站的 public key 存檔, 讓隨後的 git push 無需再對連線主機進行後續認證. (若不在 putty 先行對 github.com 主機連線, 在 plink ssh 連線下將無法儲存相關的認證檔案.) \n 啟動 start.bat 附加: \n REM for putty\nset GIT_HOME=%CDisk%:\\portablegit\\bin\\\nset GIT_SSH=%Disk%:\\putty\\plink.exe \n homt/.ssh/config 設定: \n # no proxy at home\n#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p\n# set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup\nProxyCommand y:/putty/plink.exe github.com %h %p\n \nHost github.com\n    User git\n    Port 22\n    Hostname github.com\n    \n    # for connect.exe need openssh key format\n    #IdentityFile "y:\\home\\.ssh\\id_rsa_mdecourse"\n    # for plink.exe need rsa key format but set under putty github.com session\n    # plink.exe do not need the following setting\n    #IdentityFile "y:\\home\\.ssh\\mdecourse_putty_private.ppk"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n \n 為什麼需要使用虛擬主機? \n 學習計算機程式編寫網際近端與遠端程式互動時, 可以利用近端的虛擬主機作為伺服器, 配置動態的 CMSiMDE 與 Fossil SCM 伺服器, 可以自行建立與 Github 相當的網際內容管理系統, 若再加上了解如何自行建立同時支援 IPv4 與 IPv6 通訊協定的  Squid Proxy 伺服器 , 將可以在網際程式開發流程中學習全面的整合知識. \n GitExtensions.7z \xa0有何用途? \n \n \n https://github.com/gitextensions/gitextensions \xa0是一個以 C# 編寫的開源 Git 指令工具, 由於當多人同時維護一個分組倉儲與網站內容時, 採取多人同步程式或網站內容的編修流程時, 經常需要使用較複雜的 Git 指令, 若使用\xa0 GitExtensions.7z \xa0可以較簡便執行這些複雜的 Git\xa0 指令, 並且在近端進行分支合併或衝突解決時, 可以透過圖形化的介面了解各倉儲分支的內容修改情形. \n', 'tags': '', 'url': 'USB 程式系統.html'}, {'title': 'Ubuntu 伺服器', 'text': '目前最新的  Ubuntu \xa0 LTS  伺服器為 18.04.3, 使用者可以自行下載 Ubuntu Server 18.04.3 iso 檔案, 自行在 Windows 10 操作系統下利用  Virtualbox  進行練習. \n 以下則為提供學員實習的實體主機: \n http://cd03.kmol.info \xa0 (A 班伺服器) \n http://cd04.kmol.info \xa0 (B 班伺服器) \n 建立管理者 \n $sudo adduser username $sudo usermod -aG sudo username \n Change hostname \n sudo hostnamectl set-hostname your_server_hostname sudo vi /etc/hosts add 127.0.0.1 your_server_hostname \n Reset Ubuntu password \n while booting, for bios startup computer, press shift, for uefi start computer, press esc to go to the boot menu, select from menu to boot for network and root setup, use sudo passwd username to change user password. \n /etc/netplan/50-cloud-init.yaml \n # This file is generated from information provided by\n# the datasource.  Changes to it will not persist across an instance.\n# To disable cloud-init\'s network configuration capabilities, write a file\n# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:\n# network: {config: disabled}\nnetwork:\n    ethernets:\n        enp0s3:\n            dhcp4: false \n            dhcp6: false \n            addresses: \n                - 192.168.1.13/24\n                - 2001:288:6004::1/64\n            gateway4: 192.168.1.1\n            gateway6: 2001:288:6004::254\n            nameservers:\n                addresses:\n                    - 140.130.1.2\n                    - 168.95.1.1\n                    - 2001:288:6004:1::2\n                    - 2001:b000:168::1\n    version: 2 \n 修改後, 利用 sudo netplan apply 讀取更新檔案, 並檢測格式是否正確. \n Nginx WWW 伺服器 \n 在 Ubuntu 安裝 nginx 伺服器: \n sudo apt install nginx \n 其中必須注意的是, apt 將使用 /etc/apt.conf 中所設定的 proxy 進行網路連線. \n apt.conf 設定格式為: \n Acquire::http::Proxy "http://[2001:288:6004:17::proxy_ip]:3128"; \n /etc/nginx/sites-available/default 參考檔案: \n server {\n    listen 80;\n    listen [::]:80;\n    root /home/kmol2019/newcms;\n    index index.html;\n \n    location /static {\n        alias /home/kmol2019/newcms/cmsimde/static/;\n    }\n \n    location /downloads {\n        alias /home/kmol2019/newcms/downloads/;\n    }\n \n    location /images {\n        alias /home/kmol2019/newcms/images/;\n    }\n \n    location / {\n            try_files $uri $uri/ =404;\n    } \n     \n    location /blog {\n        alias /home/kmol2019/cmsimfly/blog/;\n    }\n \n    location /reveal {\n        alias /home/kmol2019/cmsimfly/reveal/;\n    }\n}\n \nserver {\n    listen 443 ssl;\n    #listen [::]:443 ssl ipv6only=on;\n  \n    location /static {\n        alias /home/kmol2019/cmsimfly/static/;\n    }\n  \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8080;\n    }\n  \n    #server_name ipv4_ip; \n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n}\n  \nserver {\n    #listen 89 default_server;\n    #listen [::]:89 default_server ipv6only=on;\n  \n    listen 8943 ssl;\n    #listen [::]:8943 ssl ipv6only=on;\n  \n    location /static {\n        alias /home/kmol2019/cmsimfly2/static/;\n    }\n  \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8082;\n    }\n  \n    #server_name ipv4_ip;\n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n}\n \nserver {\n    #listen 88 default_server;\n    #listen [::]:88 default_server ipv6only=on;\n  \n    listen 8843 ssl;\n    #listen [::]:8843 ssl ipv6only=on;\n  \n    location /static {\n        alias /home/kmol2019/newcms/cmsimde/static/;\n    }\n  \n    location / {\n        include uwsgi_params;\n        uwsgi_pass  127.0.0.1:8081;\n    }\n  \n    #server_name ipv4_ip;\n    #ssl on;\n    ssl_certificate /etc/stunnel/localhost.crt;\n    ssl_certificate_key /etc/stunnel/localhost.key;\n    ssl_session_timeout 5m;\n    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";\n    ssl_prefer_server_ciphers on;\n    try_files $uri $uri/ =404;\n} \n Install Squid \n sudo apt install squid cd /etc/squid sudo rename squid.conf squid_orig.conf cd sftp username@ipv4_of_another_server cd /etc/squid get squid.conf \n quit sudo cp squid.conf /etc/squid sudo /etc/init.d/squid restart \n uwsgi.ini 參考檔案: \n [uwsgi]\nsocket = 127.0.0.1:8080\nuid = kmol2019\ngid = kmol2019\nplugins-dir = /usr/lib/uwsgi/plugins/\nplugin = python3\nmaster = true\nlogto = /var/log/uwsgi/emperor.log\nlogfile-chown = kmol2019:kmol2019\nprocesses = 4\nthreads = 2\nchdir = /home/kmol2019/cmsimfly\nwsgi-file = /home/kmol2019/cmsimfly/wsgi.py \n 根據上述說明流程所完成的 虛擬主機下載 . \n python3 環境準備: \n 安裝 pip3: \n sudo apt install python3-pip \n 安裝 CMSiMDE 所需模組: \n sudo pip3 install flask bs4 lxml flask_cors pelican markdown leo \n uwsgi 環境準備: \n sudo apt install uwsgi uwsgi-plugin-python3 \n sudo pip3 install uwsgi \n 編輯的設定檔案為 uwsgi_ini 目錄中的各個 .ini 設定檔案. \n nginx 環境準備: \n sudo apt install nginx \n 編輯的設定檔案為 /etc/nginx/sites-available/default 檔案. \n CMSiMDE 的設定: \n init.py 中必須將 uwsgi = False 改為 True, 因為準備採用 uwsgi 模式啟動 CMSiMDE \n apt proxy 設定檔案: \n /etc/apt/apt.conf.d/90curtin-aptproxy \n 啟動 uwsgi 指令, 將會逐一啟動 wsgi_ini 目錄中個別 .ini 檔案: \n sudo /usr/bin/uwsgi --emperor /home/kmol2019/wsgi_ini \n 最後則設定 Ubuntu 系統服務, 用來啟動 uwsgi: \n /etc/systemd/system 的 cmsimde.service 服務啟動檔案內容: \n [Unit]\nDescription=uWSGI to serve CMSiMDE\nAfter=network.target\n \n[Service]\nUser=kmol2019\nGroup=kmol2019\nWorkingDirectory=/home/kmol2019/uwsgi_ini\nExecStart=/usr/local/bin/uwsgi --emperor /home/kmol2019/uwsgi_ini\n \n[Install]\nWantedBy=multi-user.target \n 接著將 cmsimde 服務設為隨系統開機啟動: \n sudo systemctl enable cmsimde \n 若要取消 cmsimde 服務隨系統開機啟動: \n sudo systemctl disable cmsimde \n 手動啟動 cmsimde.service 服務 \n sudo systemctl start cmsimde \n 手動停止 cmsimde.service 服務 \n sudo systemctl stop cmsimde \n 最後, 在 Ubuntu 虛擬主機中設定 Fossil SCM: \n 安裝 fossil: \n sudo apt install fossil \n 查 fossil 版本: \n fossil version \n 因為採用 sudo apt install fossil 的版本為 2.5 版, 希望採用目前的最新版本 2.9, 因此: \n 直接在 Windows 10 下載 https://fossil-scm.org/home/uv/fossil-linux-x64-2.9.tar.gz, 解開壓縮檔案後, 將 fossil 送到 /homt/kmol2019/ 目錄下, 再使用指令, 將檔案複製到 /usr/bin/ 目錄下, 在 Ubuntu 要查詢 fossil 可執行檔案的位置, 使用 whereis fossil. \n sudo cp fossil /usr/bin/ \n 複製後, 再用 fossil version 查驗版本, 確認為最新的 2.9 版. \n 接著在 /home/kmol2019 目錄下建立 repository 目錄, 並且利用 fossil 起始一個 kmol2019.fossil 倉儲壓縮檔案. \n mkdir repository  cd repository  fossil init kmol2019.fossil \n 完成後, 紀錄 kmol2019.fossil 的管理密碼, 以便啟動 Fossil SCM 伺服器時, 利用 kmol2019 當作帳號, 而以記錄的管理者密碼登入進行設定. \n 接下來為了要在 https 的模式下使用 Fossil SCM 伺服器, 因此必須安裝配置 stunnel: \n sudo apt install stunnel \n 修改 /etc/environment, 加入: \n HTTPS=on \n 修改 /etc/default/stunnel4, 修改 ENABLED=1 \n 假如此時 /etc/stunnel 目錄下尚無 localhost.crt 與 localhost.key, 可以利用下列指令建立: \n 建立 localhost.key 與 localhost.crt: \n sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt \n 接著設定 /etc/stunnel/stunnel.conf 如下: \n [https]\naccept = kmol2019:5443\n# 只先啟用 ipv4\n#accept = :::443\ncert = /etc/stunnel/localhost.crt\nkey = /etc/stunnel/localhost.key\nexec = /usr/bin/fossil\nexecargs = /usr/bin/fossil http /home/kmol2019/repository/ --https --nojail --notfound kmol2019\n \n 表示利用 stunnel 執行 fossil 指令, 並且透過 http 協定啟動 位於 /home/kmol2019/repository 目錄下的倉儲壓縮檔案, 且附加採用 https 與 nojail 模式啟動. \n 其中 --nojail 目的在 drop the root privilege but do not enter the chroot jail, 其後的 --notfound 表示若沒有特別在 URL 中列出所要擷取的 .fossil 檔案 (指位於 /home/kmol2019/repository/ 目錄下), 則採用 kmol2019.fossil \n 重新啟用 stunnel: \n sudo /etc/init.d/stunnel4 restart \n 啟動後的 Fossil SCM 位於 port 5443, 且將 kmol2019 管理者密碼設為 kmol2019. \n', 'tags': '', 'url': 'Ubuntu 伺服器.html'}, {'title': '課程筆記', 'text': '利用倉儲與網頁紀錄筆記 \n 優點: \n 快速方便且能引入大量線上靜態與動態影片資料 \n 缺點: \n 必須要透過歷程資料才能看出資料紀載順序 \n 若電腦無法開機或網路無法使用時, 將無法查閱相關資料 \n 利用紙本筆記 \n 優點: \n 手寫將資料謄入紙本時, 可以加強對資料的記憶 \n 可以按照順序紀載歷程資料 \n 缺點: \n 必須隨身攜帶筆記本 \n 比較難以放入網路上的各項連結資料 \n', 'tags': '', 'url': '課程筆記.html'}, {'title': 'Tasks', 'text': '電腦輔助設計室 ipv4 網路架構 (內部 ip 應該為 192.168.1.x) \n \n 電腦輔助設計室 ipv6 網路架構 \n \n 分組執行任務 \n \n Task1: \n 了解計算機程式課程如何進行, 如何評分 \n 了解電腦輔助設計室電腦硬體與網路環境 \n 了解如何下載使用學校所提供的教育版 Windows 10 與 MS Office 2016 \n 了解如何建立 USB 上的可攜程式環境 \n 了解如何建立 Github 帳號, 如何建立 cp2019 網站 \n Task2: (佔學期成績 10%) \n 利用 Dartpad 執行亂數分組 \n 了解如何將數據檔案送到個人網站中 \n 了解如何在 Dartpad 讀取各公開 URL 數據資料 \n 了解如何將所讀取的資料轉為數列 \n 了解如何隨機弄亂數列內容 \n 了解如何使用 for 重複迴圈 \n 了解如何依序取出數列中的資料 \n 了解如何依序在數列中放入資料 \n 分組作業: 請討論如何讓亂數分組程式更加完善, 無需人為插手進行分組. \n Task3:\xa0 (佔學期成績 10%) \n 利用 Dartpad 與 Html5 Canvas 執行靜態繪圖 \n 了解如何 繪製中華民國國旗 \n 分組作業: 請討論如何完成美國國旗繪製 \n Task4:\xa0 (佔學期成績 20%) \n 利用 Dartpad 與 Html5 Canvas 執行動態繪圖 \n 了解如何製作 貪食蛇遊戲 \n 了解如何製作 乒乓球遊戲 \n 分組作業: 請將上述所有 Dartpad 上的程式轉為單一 Html 網頁程式, 並上傳到各分組網站中 \n Project:\xa0 (佔學期成績 30%) \n 請根據 \n Practical Flutter (2019) \n https://link.springer.com/book/10.1007/978-1-4842-4972-7 \n 中的範例說明, 完成各組期末專案. \n 期末分組專案: 請根據上述 Task1 ~ Task4 的內容做為參考, 討論如何完成一個能夠在網頁與手機上執行的期末專案. \n', 'tags': '', 'url': 'Tasks.html'}, {'title': '協同議題', 'text': '\n \n \n \n \n \n 使用分散式版次管理系統 (例如: Github 與 Fossil SCM), 至少有下列意義: \n \n 使用者在近端工作目錄中改版時, 無需網路連線, 具有高自由度. \n 各成員近端工作目錄改版至一定內容時, 可透過網路連線, 將版本提交推送且同步至多個雲端系統, 除了可與其他組員協同改版外, 無需擔憂各自近端資料毀損. \n 即便所有同步的雲端系統倉儲毀損, 各協同者近端的倉儲版本可以迅速再提交推送至重建的雲端系統, 即可持續執行先前的協同改版任務. \n 透過倉儲的提交歷程, 可以明確了解何人在何時, 為何對倉儲提交推送那些改版內容. \n 各使用者僅對倉儲不斷附加內容, 倉儲中任一版本中的任一內容,\xa0 均不會丟失, 且可迅速切換分支或版本號, 回到任一時刻的倉儲版本資料內容. \n \n 其他參考資料: \n https://guides.github.com/introduction/git-handbook/ \n https://learngitbranching.js.org/ \n https://github.github.com/training-kit/downloads/zh_CN/github-git-cheat-sheet/ \n http://git-school.github.io/visualizing-git/ \n https://lab.github.com/ \n 常見 Github 倉儲維護問題: \n 如何將 Github 倉儲內容回復到先前版本: \n 目前的倉儲版本已經難以繼續改版, 希望能夠將倉儲近端工作目錄內容與遠端倉儲版本退回之前的某一版本: \n 先從 Github 倉儲中找出想要退回版本的版次號:\xa0 \n 例如: 版次號為\xa0a2ac06fdef0f96ee55ccdc060eddb120fb90089a, 可取最前面七個字元當作版次號, 也就取版次號為\xa0 a2ac06f, 然後在近端工作目錄中執行下列三個指令 (特別注意第一個指令最後需要有"逗點" 符號: \n git checkout\xa0a2ac06f . \n git commit -m "將倉儲版本切回\xa0 a2ac06f\xa0 版次內容" \n git push \n 第十週起的分組協同規劃: \n https://github.com/mdecourse/cp2019/issues/23 \n 以 SSH 協定維護 Github 倉儲: \n https://github.com/mdecourse/cad2019/issues/20 \n Ubuntu 伺服器規劃: \n https://github.com/mdecourse/cad2019/issues/9 \n CMSiMDE 協同議題: \n https://github.com/mdecourse/cmsimde/issues/1 \n 電腦教室規劃歷程: \n https://github.com/mdecourse/wcms2018/issues/7 \n 有關分組期末報告: \n 網誌可採用 Blogger 與 Pelican \n 網頁版可採用 Github Pages 上的靜態網頁 \n 簡報可採用 Reveal.js \n PDF 格式或雙欄位論文格式的分組報告? \n from_latex_to_html_and_back.pdf \n 利用\xa0 https://pandoc.org/ \xa0與\xa0 https://yihui.org/tinytex/ \xa0將 html 轉出的 LaTeX 設法轉為 pdf 分組報告與雙欄位論文格式分組報告 \n \n', 'tags': '', 'url': '協同議題.html'}, {'title': 'Task1', 'text': "任務摘要 \n 本課程使用 Git 分散式版次管理系統的目的有: \n 1. 讓使用者利用 Github 儲存資料, 逐步學習如何利用分散式版次管理流程協同開發程式. \n 2. 利用 Github Pages 建立網站, 紀錄計算機程式學習歷程. \n 為了分便在 Github Pages 建立網站, 簡報與網誌, 採用 CMSiMDE 內容管理系統, 將此一系統所建立的靜態網頁、簡報與網誌, 送到 Github 倉儲建立 WWW 網站. \n CMSiMDE 網際內容管理系統採用 Python 與 Flask, bs4, lxml, pelican, Markdownㄝflask_cors 與 Leo 等模組建立, 可以在提拱 Python 程式與相應模組的環境中, 以動態管理系統的方式執行, 也可以將內容轉為純 html, css 與 Javascript 的靜態網頁執行. \n 所謂動態內容管理系統, 就是讓 CMSiMDE 直接在伺服器中執行 Python 與相應模組, 管理者可以直接利用瀏覽器登入內容管理系統, 修改內容後, 直接呈現在網站中. \n 而靜態內容管理系統則只包含 Html, css 與 Javascript 的資料, 使用者利用 Git 分散式版次管理系統的指令操作, 將資料送到 Github 倉儲後, 由 Github Pages 所提供的 WWW 伺服器將資料轉為特定網址下的網站, 此種靜態網站無管理者登入設置, 無法直接在網站中修改資料. \n CMSiMDE 的系統採用子模組的方式建立, 使用者必須將此倉儲設為網際內容管理系統下, 名稱為 cmsimde 目錄的子模組, 並且將 up_dir 目錄中的資料複製到使用者倉儲主目錄下, 才能夠正常運作. 動態啟動時, 必須進入 cmsimde 目錄, 以 python 啟動 wsgi.py 程式, 並用瀏覽器在  https://localhost:9443 \xa0中開啟動態管理系統, 管理者密碼內定為 admin. \n 當 CMSiMDE 使用者在動態系統中完成資料更動後, 送到 Github Pages 伺服之前, 必須利用 generate_pages 功能, 將位於 config/content.htm 中的資料內容, 逐一分頁轉為 content 目錄中的靜態網頁資料後, 再退回使用者的倉儲主目錄, 利用 Git 指令, 將倉儲資料提交推送到使用者的 Github 倉儲. \n 如何編輯個人  CMSiMDE  網頁內容: \n \n 如何在 CMSiMDE 網頁中加入圖片: \n \n 如何對操作影片加入字幕: \n \n 開始學習  Dart , 並利用  Gist  將  Dartpad  嵌入學員網頁: \n \n \n Task1: \n 1/5: 了解計算機程式課程如何進行, 如何評分? \n 課程評分比例 (包含學員自評、同組互評與教師評分等三項): \n 設一甲亂數分組 \n   ###############################  \n 亂數分組: \n 學員名單 URL:   每組人數:      \n \n  ##############################  \n 設一乙亂數分組 \n 計算機程式每週自評與互評表單: \xa0 https://forms.gle/hztfjHLkrAaLyntv6 \n 學員出席 (10%) \n Github 倉儲與網站管理\xa0 (20%) \n 任務執行 (40%) \n 亂數分組與應用 \n 靜態繪圖與應用 \n 動態繪圖與應用 \n 程式開發 (30%) \n 課程計分流程: \n '''\n根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績\n'''\n\ndef diff(自評分數, 互評得分):\n    return abs(自評分數 - 互評得分)\n    \ndef max(自評分數, 互評得分):\n    if 自評分數 > 互評得分:\n        return 自評分數\n    else:\n        return 互評得分\n\ndef 分組比分(自評分數, 互評得分):\n    if diff(自評分數, 互評得分) < 5:\n        學員得分 = max(自評分數, 互評得分)\n    else:\n        學員得分 = 互評得分 - diff(自評分數, 互評得分)\n    return 學員得分\n    \ndef 全班比分(學員得分, 教師評分):\n    if diff(學員得分, 教師評分) < 5:\n        學員成績 = max(學員得分, 教師評分)\n    else:\n        學員成績 = 教師評分 - diff(學員得分, 教師評分)/4\n    return 學員成績\n\ndef 學員成績(自評分數, 互評得分, 教師評分):\n    學員分組得分 = 分組比分(自評分數, 互評得分)\n    學員課程成績 = 全班比分(學員分組得分, 教師評分)\n    return 學員課程成績\n    \nprint(學員成績(80, 70, 60))\nprint(學員成績(60, 70, 80)) \n 2/5: 了解電腦輔助設計室電腦硬體與網路環境 \n 購置時間: 2016 年暑假 四年保固的華碩 Skylake MD790/I7-6700 Intel 第六代 Core i7/3.4GHz/8M Intel Q170 晶片組 16GB DDR4/2133/288 Pin 記憶體 (8 GBx2) 2 TB-SATA3 硬碟 Asus MINI-GTX950-2G 顯示卡 (支援 PCIE 3.0, OpenGL 4.5, 768 個CUDA 核心數) 500瓦電源供應器 USB 3.1x2 (10GB/s) USB 3.0x6 (5GB/s) USB 2.0x2 (480MB/s) 群準的 EVOsys PRO/SATA 還原卡 同時支援 D-sub、HDMI 及 DisplayPort 三台獨立顯示器多工作業 \n 網路以 NAT IPv4 為主, 可隨時切換為 IPv6 網路連線 系上 IPv4: 140.130.17.X Gateway: 254 DNS: 3, 2, Proxy: 7, 17 系上 IPv6: 2001:288:6004:17::X Gateway:254DNS: 3, 2, Proxy: 7, 17 中華電信 DNS: 2001:b000:168::1 \n 3/5: 了解如何下載使用學校所提供的教育版 Windows 10 與 MS Office 2016 \n 在校區內所使用的電腦 (若只需下載 .iso 可以設定系上提供的 Proxy\xa0 server 後下載), 可以透過\xa0 https://software.nfu.edu.tw/ \xa0取得各項教育版軟體, 其中包括 Windows 操作系統與 MS Office 以及 AutoDesk 教育版相關套件. \n Windows 10 1809.iso \xa0 \xa0\xa0 \xa0 kms.bat \xa0(每半年認證, 若在校外必須透過 \xa0 VPN \xa0 連線後進行) \n Office 2016.iso \xa0 \xa0 \xa0 kms.bat \xa0 (每半年認證, 若在校外必須透過 \xa0 VPN \xa0 連線後進行) \n AutoDesk PDSU.iso \xa0(利用 @gm 電子郵箱驗證後, 取得學生版三年使用授權) \n 當使用者位於校區外, 希望連線使用校區內的相關電腦資料, 包括下載教育版軟體或使用各項電子期刊或電子書, 可以利用\xa0 https://nfucc.nfu.edu.tw/zh/download/download-network/ssl-vpn \xa0連線後使用. \n 4/5: 了解如何建立 USB 上的可攜程式環境 \n dartpad_based.7z \xa0(登入 @gm 帳號後下載, 210 MB 解開壓縮後約 900 MB) \n 利用 python -m pip install flask_cors 安裝 flask_cors, 以便使用最新版的 CMSiMDE \n GitExtensions.7z \n 5:5: 了解如何建立 Github 帳號, 如何建立 cp2019 網站 \n https://github.com/mdecourse/cmsimde \xa0 \n 在此一階段, 若希望利用 SSH (Secure Shell) 模式對 Github 連線, 必須了解: \n 1. Github 支援 HTTPS 與 SSH 等兩種連線方式, 採用 HTTPS 必須推送時輸入驗證權限的帳號與密碼, 若採用 SSH 模式連線, 則透過 Github 帳號上所存放的 pub key, 與近端使用者指定位置的 private key 進行認證. \n 2. 每一個倉儲從 Github clone 下來之後, 便會將預計使用的 HTTPS 或 SSH連線的 URL 註記在 .git 目錄中的 config 檔案中 \n 3. 通常利用可攜環境啟動 portablegit 之後,\xa0 SSH 所使用的 private key 路徑設定, 通常存於 y:\\home\\.ssh 目錄下的\xa0 config 檔案中. \n 4. 如何利用 portablegit 中的 sh.exe 建立所需的 public key 與 private key? \n 5. 必須了解  Github\xa0 所接受的 keys 格式 ,  ssh-keygen 所支援的 keys\xa0 格式 , 以及如何與  Putty  所讀取的 keys 格式互相配合. \n 6. public key 該送到 Github 的何處? \n 7. y:\\home\\.ssh\\config\xa0 定檔案中除了宣告 private\xa0 key 所在位置外, 還必須注意個人使用多帳號與多 private keys 設定方式, 以及如何在 SSH 連線模式下設定 Proxy Server. \n 8.  參考資料", 'tags': '', 'url': 'Task1.html'}, {'title': 'Task2', 'text': '在學習如何利用 Dart 語法建立亂數分組程式時, 必須先了解如何使用  Dartpad . \n 下列影片說明如何利用 Javascript 建立按鈕, 讓\xa0 https://dartpad.github.io \xa0可以直接帶出存放在  downloads  目錄中的 Dart 程式範例. 所引用的程式包含 純 Dart 程式碼 , 包含 html 與 css 的 網際程式碼 , 以及  flutter 程式碼 等三種. \n \n  透過 getDart(dirname) 取位於 downloads/dart_ex/ 目錄中 dirname 目錄中的 Dart 程式碼  \n \n  取 Dart 程式的按鈕  \n 純 Dart 程式 \n Hello   For Loop   Sum   Runge-Kutta   RK ex1   Mass Spring Damping   Function   Function Parameter   Fat Arrow   Temp 1 \n Html 程式 \n 亂數分組   ROC Flag   rot ROC   USA Flag   Grid   X-Y Plot   Slithery   Tetris \n Flutter 程式 \n Flutter0   Flutter1   Flutter2   Flutter3   Flutter4   Flutter Counter   ROC Flag   踩地雷 1   踩地雷 2   踩地雷 3   踩地雷 4   Dropdown   Multiselect   Search   Login   溫度轉換   Tic-Tac-Toe   Calculator   Mouse1   Paint1 \n  內建放入的 Dart 原始碼  \n 放大   回復 \n \n https://github.com/thatisuday/dart-getting-started-guide \n Git sparse-checkout 用法: \n 從  https://github.com/mdecourse/cp2019  倉儲中, 利用 Git 指令, 只取下 .git 與特定目錄 (當各分組學員希望只取下倉儲中 downloads/dart_ex/ 目錄中的所有程式時) \n \n 建立目錄, 例如: c:\\tmp\\mkdir get_dart_ex \n cd get_dart_ex \n git init \n git config core.sparsecheckout true \n git remote add -f origin https://github.com/mdecourse/cp2019.git \n echo downloads/dart_ex >> .git/info/sparse-checkout \n git pull origin master \n \n 將上述流程寫成 batch 檔案命名為 get_dart_ex.bat: \n @echo off\nREM 建立 get_dart_ex 目錄\nmkdir get_dart_ex\nREM 進入所建立的目錄\ncd get_dart_ex\nREM 將此目錄起始為 git 倉儲\ngit init\nREM 在此倉儲啟動 sparse checkout 功能\ngit config core.sparsecheckout true\nREM 將此倉儲與 mdecourse 帳號下的 cp2019 倉儲對應, 且將倉儲連結命名為 origin\ngit remote add -f origin https://github.com/mdecourse/cp2019.git\nREM 將要取下的倉儲目錄名稱, 存入 sparse-checkout 設定檔案中\necho downloads/dart_ex >> .git/info/sparse-checkout\nREM 拉下 origin 中的 master 分支, 這時只會取下 dart_ex 目錄中的檔案\ngit pull origin master\ncd .. \n 由 Google 所提供的\xa0 https://dartpad.dartlang.org/ \xa0,\xa0 https://dartpad.dev/ \xa0與\xa0 https://dartpad.cn/ \xa0都可以在純 IPv6 的網路連線環境下擷取. 其中\xa0 https://dartpad.cn/ \xa0是專門提供中國地區的用戶使用. \n 而  https://dartpad.github.io \xa0是透過 Github Pages 建立, 目前只能在 IPv4 環境下連線. \n 此外, 目前 Dartpad 只支援能夠在網頁上運作的程式庫, 包括: \n dart:core, dart:html, dart:math, dart:convert, dart:async \n 由於\xa0 https://github.com/dart-lang/dart-pad \xa0的執行, 除了需要前端的 WWW 伺服器外, 還需要後端的\xa0 https://github.com/dart-lang/dart-services \xa0伺服器, 而上述所有提供 Dartpad 服務的線上主機都使用 Google 所提供的 dart-services 服務, 因此對 Dartpad 的連線必須在廣域網路上運作. \n 假如希望建立能夠在區域網路或近端內部網路運作的 Dartpad, 必須自行建立\xa0 \xa0 https://github.com/dart-lang/dart-services \xa0伺服器, 然後修改前端指向, 就可以在不連接到廣域網路的情況下使用 Dartpad. \n 目前 Dartpad 所提供執行的程式, 可以包含 html 與 css 的配置, 且能夠透過 dart2js 的轉換將網際 Dart + html + css 的 Dartpad 程式, 轉為直接在網頁上運作的純 Javascript 程式. \n 有關 HTML: \n Hypertext Markup Language (HTML) is the language for delivering content on the World Wide Web (WWW).\xa0HTML documents contain elements surrounded by tags—text that starts with a < symbol and ends with a > symbol.\xa0\xa0Basic HTML can include directives for formatting in a language called Cascading Style Sheets (CSS) and programs for interaction in a language called JavaScript. Browsers, such as Firefox and Chrome, interpret the HTML along with any CSS and JavaScript to produce what we experience when we visit a website. HTML holds the content of the website, with tags providing information on the nature and structure of the content as well as references to images and other media. CSS specifies the formatting. The same content can be formatted in different ways. JavaScript is a programming language that’s used to make the website dynamic and interactive. \n https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/HTML_basics \n 有關 CSS: \n https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/CSS_basics \n 有關 Dart: \n Dart for Absolute Beginners (2014) \n https://link.springer.com/book/10.1007/978-1-4302-6482-8 \n https://da-bootcamp.firebaseapp.com/?course=start_programming_dart \n Task2:\xa0 (佔學期成績 10%) \n 利用 Dartpad 執行亂數分組 \n 了解如何利用 ShareX 拍攝操作影片 \n 下載 ShareX 可攜版本 \n 了解如何編輯 mp4\xa0 影音檔案,\xa0加入浮水印與字幕 \n 請登入 @gm 電子郵箱後, 下載\xa0 aegisub_avidemux_openshot.7z \n 了解如何將數據檔案送到個人網站中 \n 使用 git 新增提交推送 \n 了解如何在 Dartpad 讀取各公開 URL 數據資料 \n 了解如何將所讀取的資料轉為數列 \n 了解如何隨機弄亂數列內容 \n 了解如何使用 for 重複迴圈 \n 了解如何依序取出數列中的資料 \n 了解如何依序在數列中放入資料 \n 分組作業: 請討論如何讓亂數分組程式更加完善, 無需人為插手進行分組. \n 問題描述: \n 設一甲亂數分組 \n 設一乙亂數分組 \n 開學第一週時, 設一甲有 52 人, 若以每 10 人為一組, 則最後剩下之 2 人將以手動, 分別在第一組與第二組各加上一人, 因此最後結果為第一組與第二組有 11 人, 其餘三組則維持 10 人. \n 請各組討論如何以 Dartpad 上的程式, 直接自動完成亂數分組, 無需人為插手調整.', 'tags': '', 'url': 'Task2.html'}, {'title': 'Math', 'text': 'http://www.calculus.org/ \n http://calculusmadeeasy.org/ \n http://www-math.mit.edu/~djk/calculus_beginners/ \n Calcbible.pdf \n http://tutorial.math.lamar.edu/ \n http://www.synechism.org/wp/difference-equations-to-differential-equations/ \n https://www.mathsisfun.com/algebra/taylor-series.html \n Derivation_of_Taylor_Series_Expansion.pdf \n 500 Examples and Problems of Applied Differential Equations \n https://link.springer.com/book/10.1007/978-3-030-26384-3 \n Traveling Salesman Problem \n https://github.com/afourmy/pyTSP \n \n', 'tags': '', 'url': 'Math.html'}, {'title': 'Dart2 基本語法', 'text': '\n \n \n \n \n Dart 解微分方程式 \n \n \n \n 上述質量-彈簧-阻尼系統的運動方程式推導如下: \n $$ \\large{ m \\ddot{x} + b \\dot{x} + kx = F } $$ \n 假設 $ \\large {\\dot{x} = v} $\xa0 則上述二階常微分方程式可以寫為: \n $$ \\large{ \\dot{v} = F/m - (b/m) v - (k/m)x} $$ \n 並在已知 $x$ 與 $v$ 的起始條件下, 利用 4 階 Runge-Kutta 數值分析方法解此一微分方程式. \n 利用 Excel 繪出上述解微分方程式模擬結果: \n \n \n 上述模擬與求解的實際應用:  Intro to Structural Motion Control_Chapter4.pdf \n 學習摘要: \n Dart 程式語言的執行與傳統的 C 程式相同,  必須從 main() 主函式開始執行 . \n Dart 程式語法在每一個完整的可執行程式段, 使用 ";" 隔開, 並利用大括號 "{}" 來區隔程式區段. \n Dart 程式具有資料型別推斷的設計, 但是當變數內容存放特定資料型別後, 便無法再自動轉為其他型別資料. \n Dartpad 系統的執行分為前端與後端兩個部分, 以  https://dartpad.github.io \xa0為例, 整體倉儲位於  https://github.com/mdecourse/dartpad , 其中的 docs 目錄被設定為 Github Pages 的資料伺服目錄, 亦即  https://mdecourse.github.io/dartpad \xa0的前端採用 Github Pages, 因此目前只能透過 IPv4 網路協定連線. \n 而此一 Dartpad 系統還透過\xa0 https://github.com/mdecourse/dartpad/blob/master/lib/services/common.dart \xa0中的設定, 利用\xa0 https://dart-services.appspot.com/ \xa0所提供的服務作為後端. \n 使用者也可以自行利用\xa0 https://github.com/dart-lang/dart-services \xa0程式碼, 自行建立 Dartpad 所需的後端伺服器, 並修改 Dartpad 前端的\xa0 https://github.com/mdecourse/dartpad/blob/master/lib/services/common.dart \xa0 設定, 指向自行設定的 Dart Server 即可在區域網路中運行 Dartpad 服務. \n 利用\xa0 Dartpad 引用 Dart 程式的方法, 分為 Gist 引用以及倉儲資料引用, Gist 引用以\xa0 https://dartpad.dartlang.org/ ?id=gistid\xa0 指定 Gist 檔案的對應 id 引用, 其中 Gist 可以直接納入 index.html, style.css 與 main.dart, 但使用上較不方便, 因為程式碼並未放入使用者的內容管理倉儲中. \n 第二種利用 Dartpad 引用 Dart 程式的方法, 為 Github 倉儲資料引用, 可透過\xa0 https://dartpad.dartlang.org/ embed-dart.html 引入純 dart 程式, 或者透過\xa0 https://dartpad.dartlang.org/ embed-html.html 引入包含 index.html 與 style.css 以及 .dart 程式的網際程式, 引用語法為: \n https://dartpad.dartlang.org/embed-dart.html?gh_owner=mdecourse&gh_repo=cp2019&gh_path=downloads/dart_ex/for&theme=dark \n 可以引用位於\xa0 https://github.com/mdecourse/cp2019/tree/master/downloads/dart_ex/for \xa0的程式 \n 引用參數包含宣告 gh_owner, gh_repo, gh_path, theme, 以及 run 等. \n gh_owner - 宣告 github 擁有者, 即 Github 登入帳號. \n gh_repo - 宣告所使用的 github 倉儲. \n gh_path - 宣告 github 資料目錄所在路徑. \n theme - 宣告所要引用的頁面顏色主題, 設為 dark 表示使用暗色系頁面. \n run - 設為 true 表示頁面引用後, 程式直接執行 \n Dart language samples ,  Dart language tour ,  Dart async-await . \n Dart for Absolute Beginners \n https://da-bootcamp.firebaseapp.com/?course=start_programming_dart \xa0 \n 有關 HTML: \n https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/HTML_basics \n 有關 CSS: \n https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/CSS_basics \n 引用倉儲 Dart 程式範例 \n 程式碼位於:  https://github.com/mdecourse/cp2019/tree/master/downloads/dart_ex/for \n 包含 yaml 檔案:\xa0 https://github.com/mdecourse/cp2019/blob/master/downloads/dart_ex/for/dartpad_metadata.yaml \n 以及所要引用的 Dart 程式:\xa0 https://github.com/mdecourse/cp2019/blob/master/downloads/dart_ex/for/main.dart \n 若為 console 模式, 利用 main.dart 與 dartpad_metadata.yaml 透過 embed-dart.html\xa0 導入. \n 若為網頁模式, 利用 main.dart, index.html style.css 與 dartpad_metadata.yaml 透過 embed-html.html 導入. \n main.dart 原始碼: \n int i;\nint sum;\n\nmain(){\n  sum = 0;\n  for(i=1;i <= 10 ;i++){\n    sum += i;\n    print("$sum");\n  }\n  print(\'sum = $sum\');\n} \n dartpad_metadata.yaml 設定檔案: \n # 說明此 yaml 檔案所引用程式的目的\nname: Dart for loop example1\n# 引用模式為純 dart 或 html 模式\nmode: dart\n# 所包含引入的程式名稱, 若為純 dart 則只包含 dart 程式, 若為 html 模式, 則加入 index.htm 與 style.css\nfiles:\n  - name: main.dart\n \n 引用 html 語法: \n <iframe width="800" height="600" src="https://dartpad.dartlang.org/embed-dart.html?gh_owner=mdecourse&gh_repo=cp2019&gh_path=downloads/dart_ex/for&theme=dark"></iframe> \n 利用 iframe 標註引入 For loop 程式: \n \n 其他在頁面中利用\xa0 Dartpad 引用程式碼的範例: \n https://dartpad.dartlang.org/experimental/new_embeddings_demo.html \n 能夠利用 Dart 進行基本數學運算後, 就可以進一步套用數值分析方法, 解決 簡單的工程問題 . ( 淺談數值計算.pdf ) \n 只要將上述 for 迴圈程式, 加上 Dart 函式的定義與呼叫方法, 就可以透過數值分析法 (Numerical Analysis) 解已知起始條件的常微分方程式: \n https://github.com/mdecourse/cp2019/tree/master/downloads/dart_ex/runge_kutta \n \n 上述利用  Runge-Kutta 方法 解單階常微分方程式的流程, 可以延伸至二階以上的常微分方程式, 以下利用相同方法, 以 Dart 解  Mass-Spring-Damping 模擬 中的二階常微分方程式: \n \n 上述數值分析方法, 若能在網際環境中, 以 HTML5 Canvas 將解常微分方程式, 以圖示方法匯出, 將可更清楚表達該常微分方程式解所代表的物理意義, 下列為利用基本 For 迴圈與 HTML5 Canvas 的基本的幾何繪圖範例: \n \n 分組任務: \n 1. 數值分析運算驗證: \n 請根據  Ordinary differential equation examples.pdf \xa0中的三個範例, 利用上述 Runge-Kutta 方法進行驗證運算結果. \n 2. 各組可否參考 \n Dynamic Computation of Runge-Kutta Fourth-Order Algorithm for First and Second Order Ordinary Differential Equation Using Java.pdf \n 與 \n The Dynamic Characteristic Analysis of Four-bar Linkages with Joint Clearances Based on the Computer Simulation \n 等兩篇論文的內容, 完成一篇標題為: \n 利用 Dart 程式進行具轉軸間隙的平面四連桿機構動力分析 \n Dynamic Analysis of Planar Four-bar Linkages with Joint Clearances using Dart Program \n 學術研究論文?\xa0 \n 假如再延伸上述的動力系統分析, 將流程套用到大樓電梯軌道配重系統對抗震性能的影響分析, 其研究結果: \n 大樓電梯軌道配重系統的抗震性能分析 \n', 'tags': '', 'url': 'Dart2 基本語法.html'}, {'title': 'Dart Tour', 'text': 'https://dart.dev/guides/language/language-tour \n Dart supports top-level functions. \n https://en.wikipedia.org/wiki/First-class_function \n https://dart.dev/guides/language/effective-dart \n', 'tags': '', 'url': 'Dart Tour.html'}, {'title': 'Unit Converter', 'text': '常用工程單位轉換程式: \n https://pub.dev/packages/units \n https://github.com/arabbani/unit_converter \n https://github.com/flutter/udacity-course/tree/master/unit_converter/unit_converter \n', 'tags': '', 'url': 'Unit Converter.html'}, {'title': 'SciTE setup', 'text': '為了在 SciTE 執行 Dart 程式, 或利用 dart2js.bat 將 Dart 轉為 Javascript, 都必須將原先的 \n dartpad_based.7z \xa0(登入 @gm 帳號後下載 CMSiMDE 相關可攜程式環境) \n 升級為: \n flutter_portable_final.7z \xa0 \xa0(登入 @gm 帳號後下載完整的 Flutter 可攜程式環境) \n 目前 Dartpad 只能納入特定的網際程式庫, 若需導入其他程式庫執行 Dart, 除了在之後的 Visual Studio Code 執行 Dart 與\xa0 Flutter 程式外, 也可以設法在 SciTE 編輯器中執行. \n 但是必須要修改 SciTE 中的 cpp.properties ( 註: 假如  data\\wscite415\\wscite 目錄中已經有先前設定的 dart.properties 檔案, 必須先行刪除 ) , 將 Dart 程式語言的關鍵字納入, 並且指定由 Tools->Go 對應採 dart.exe 來執行 Dart 程式. 而 Tools->Compile 則設定為透過 dart2js 將 Dart 程式轉為 Javascript 格式. \n 修改 SciTE cpp.properties \n 必須額外加入的 Dart 程式語言設定: \n # for Dart 1/7\nfile.patterns.dart=*.dart\n# for Dart 2/7\nfilter.dart=Dart(dart)|*.dart|\n# for Dart 3/7\n*filter.dart=$(filter.dart)\n# for Dart 4/7\nlexer.$(file.patterns.dart)=cpp\n# for Dart 5/7\n*language.dart=&Dart|dart||\n# for Dart 6/7\nkeywordclass.dart=\\\nabstract continue false new this \\\nas default\tfinal\tnull throw \\\nassert deferred finally\toperator true \\\nasync do for\tpart try \\\nasync* dynamic get rethrow typedef \\\nawait else\tif return var \\\nbreak enum\timplements set void \\\ncase\texport import static while \\\ncatch external in super with \\\nclass extends is\tswitch yield \\\nconst factory library sync* yield* \nkeywords.$(file.patterns.dart)=$(keywordclass.dart)\n# for Dart 7/7\ncommand.go.*.dart=dart.exe "$(FileNameExt)"\ncommand.compile.*.dart=dart2js -o $(FileName).js $(FileNameExt) \n 修改後的  cpp.properties 下載 \xa0(解開壓縮後, 放入隨身系統\xa0data\\wscite415\\wscite 目錄中) \n Dart 一般程式執行 \n 配置完成後, 重新啟動隨身程式系統, 利用以下 Dart 程式進行測試: \n \n 在 y:\\tmp 中建立 dart_examples\\petitparser_ex 目錄 \n 利用 SciTE 建立\xa0 pubspec.yaml 檔案, 內容如下: \n name: mocad\nversion: 0.0.1\ndependencies:\n  petitparser: ^2.4.0 \n 表示接下來的程式執行, 需要導入 petitparser 2.0.0 至 2.4.0 版的程式庫. \n \n 利用命令列進入 petitparser_ex 目錄後, 執行 pub install, 表示要根據 pubspec.yaml 中的設定, 安裝對應的 petitparser 程式庫, 安裝完成後, 會在\xa0.packages 檔案中註記安裝目錄與內容. \n \xa0接著在 petitparser_ex 目錄中, 利用 SciTE 編輯器, 建立 petitparser_ex1.dart 內容如下: \n import "package:petitparser/petitparser.dart";\n \nmain() {\n  var str = \'aa12bb23cc5\';\n  var parser =\n      (digit().plus().flatten() | any().map((_) => null)).star().map((each) {\n    print(each);\n    var total = 0;\n    for (String numStr in each) {\n      if (numStr != null) {\n        total += int.parse(numStr);\n      }\n    }\n    return total;\n  });\n  var total = parser.parse(str);\n  print(total);\n} \n 其中, 導入步驟 3 所安裝的 petitparser 程式庫後, 執行 str 字串的解析. \n \n 最後在 SciTE 編輯器中, 以下拉式功能表 Tools->Go 執行, 將可得到下列結果: [null, null, 12, null, null, 23, null, null, 5] Success[1:12]: 40 \n \n Dart 網際程式執行 \n 由於一般瀏覽器中只搭載 Javascript 解譯器, 因此下方的 Dart 網際程式, js_ex1.dart, 必須轉為 Javascript 後才能在網頁中執行: \n 首先宣告並安裝所需的 js 程式庫, 建立 pubspec.yaml 檔案. \n name: mocad\nversion: 0.0.1\ndependencies:\n  js: any \n 以命令列進入範例程式目錄, 執行 pub install, 安裝 js 程式庫. \n 建立 js_ex1.dart 後, 利用 Tools->Compile 編譯為 js_ex1.js 程式檔案. \n // 將 js_ex1.dart 轉為 javascript 檔案 js_ex1.js\n//dart2js -o js_ex1.js js_ex1.dart\n// 導入 package 中的程式庫\nimport \'package:js/js.dart\';\n\n// 宣告外部 Javascript 程式庫中的 alert 函式\n@JS()\nexternal void alert(String str);\n\nmain(){\n    // 呼叫 alert 函式, 顯示出字串\n    alert(\'哈囉! 利用 dart2js 批次檔案將 dart 轉為 javascript\');\n} \n 利用 dart2js -o js_ex1.js js_ex1.dart 轉為 Javascript, 或者可以直接在已經設定使用 dart2js 轉換 dart 程式的 SciTE 編輯器, 以 Tools->Compile 將 dart 轉為 Javascript 程式. \n 配合網際 Dart 程式轉為 Javascript 後執行的 index.html: \n <html>\n<body>\n<script src="js_ex1.js"></script>\n</body>\n</html> \n 下載上述  Dart_js_ex1.7z \xa0(包含 js_ex1.dart, index.html 與 pubspec.yaml 檔案) \n 下載呼叫 Cango 程式庫的  Dart_js_ex2.7z  (包含 js_ex2.dart, cango.dart, index2.html, Cango Javascript 程式庫與 pubspec.yaml 檔案) \n 範例二以 Dart 呼叫  Cango Javascript 程式庫 , 執行正齒輪繪圖程式: \n import \'./cango.dart\';\n\nimport \'dart:html\';\n//import \'dart:core\';\nimport \'dart:math\' as math;\nimport \'package:js/js.dart\';\n\nCanvasElement canvas;\nCanvasRenderingContext2D ctx;\n\n// n 為齒數, m 為模數, pa 為壓力角\ncangoGear(int n, num m, num pa){\n    int i;\n    // pr 為節圓半徑 pitch circle radius\n    num pr = n*m/2;\n    num rb = pr*math.cos(pa*math.pi/180);\n    // tooth 為單一齒的齒形數據\n    var tooth = createGearTooth(m, n, pa);\n    // 利用齒形數據, 建立 SVGsegs 片段資料\n    var toothData = SVGsegs(tooth);\n    // 將 toothData 旋轉半齒, 讓齒形以 x 軸為對稱中心\n    // SVGsegs 自帶資料旋轉 rotate() 方法\n    //toothData = toothData.rotate(180/n);\n    // 利用 SVGsegs 自帶的 dup() 資料 duplicate 方法, 建立 gear 單齒資料\n    var gearData = toothData.dup();\n    // 利用單齒輪廓旋轉, 產生整個正齒輪外形\n    for(i=1; i<n; i++){\n        //將 toothData 中的資料複製到 newTooth\n        //var newTooth = toothData.dup();\n        //配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear\n        var newTooth = toothData.rotate(-360*i/n);\n        print(i);\n        gearData = gearData.joinPath(newTooth);\n    }\n    // rotate the tooth to put start of involute on the x axis\n    // 目前 Path 中的 pitchToBaseAngle 旋轉無法作用\n    num pitchToBaseAngle = (math.sqrt(pr*pr - rb*rb)/rb) - math.acos(rb/pr);\n    var gear = Path(gearData, {\'degs\':180*pitchToBaseAngle/math.pi, \'x\':-rb, \'strokeColor\':\'red\'});\n    return gear;\n}\n\nmain() {\n  var cgo = Cango("canvas");\n  cgo.gridboxPadding(10, 10, 10, 10);\n  cgo.setWorldCoordsRHC(-100, -100, 300, 150);\n  // draw axes\n  cgo.drawAxes(0, 70, 0, 70,\n      {\'xOrigin\': 0, \'yOrigin\': 0, \'fontSize\': 10, \'strokeColor\': \'gray\'});\n  var gear = cangoGear(20, 5, 20);\n  // 必須利用 cgo.render() 顯示 Path 資料\n  cgo.render(gear);\n}\n \n cango.dart 串接程式碼: \n @JS()\n// 宣告此為程式庫 ,名稱為 cango\nlibrary cango;\n// 此程式庫需要導入 package 中的 js 程式庫\nimport \'package:js/js.dart\';\n\n@JS()\nclass Cango {\n  // Cango 為外部程式庫, 在此轉為 Dart 類別\n  external factory Cango(String selector);\n  // 以下為 Cango 在外部程式庫的相關方法, 在此轉為 Dart Cango 類別的物件方法\n  external dynamic gridboxPadding(int left, int bottom, int right, int top);\n  external dynamic setWorldCoordsRHC(num vpOriginX, num vpOriginY, num spanX, num spanY);\n  external dynamic drawAxes(num xMin, num xMax, num yMin, num yMax, Map options);\n  external dynamic drawPath(List pathDef, Map options);\n  external dynamic render(var rootObj);\n  external dynamic circle(num diameter);\n  external dynamic ellipse(num width, num height);\n  external dynamic square(num width);\n  external dynamic rectangle(num width, num height, num rad);\n  external dynamic  triangle(num side);\n  external dynamic cross(num width);\n  external dynamic ex(num diagonal);\n}\nexternal dynamic clone(var orgItem);\nexternal dynamic SVGpath(String pathStr);\n\n@JS()\nclass Path{\nexternal factory Path(var commands, var options);\nexternal dynamic dup();\n}\n\n\n@JS()\nclass SVGsegs{\n    external factory SVGsegs(var data);\n    external toString();\n    external dynamic dup();\n    external dynamic translate(num x, num y);\n    external dynamic rotate(num deg);\n    external dynamic appendPath(var extensionData);\n    external dynamic joinPath(var extensionData);\n}\n\n// 以下為從 html Javascript 程式導入, 直接在此轉為 Dart 函式或變數宣告\nexternal dynamic createGearTooth(num module, int teeth, num pressureAngle);\nexternal dynamic rotateTooth(List inData, num rotRads);\nexternal dynamic Tweener(num delay, num duration, String loopStr);\n \n 以 dart2js 將範例轉為 Javascript 後, 執行結果如下: \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'SciTE setup.html'}, {'title': 'Dart FFI', 'text': 'https://dart.dev/guides/libraries/c-interop \n https://github.com/dart-lang/samples/tree/master/ffi \n https://flutter.dev/docs/development/platform-integration/c-interop \n 一旦 Dart 可以透過 FFI (Foreign Function Interface) 與 C/C++ 所編寫的動態連結程式庫直接互動, 就可以利用 Dart 呼叫\xa0 https://github.com/solvespace/solvespace \xa0中的 Geometric Contraint Solver 程式庫, 用來解決平面機構分析問題. \n 簡單範例: \n 進入範例目錄, 以 pub install 配合 pubspec.yaml , 安裝所需程式庫. \n hello.c \n / Copyright (c) 2019, the Dart project authors.  Please see the AUTHORS file\n// for details. All rights reserved. Use of this source code is governed by a\n// BSD-style license that can be found in the LICENSE file.\n\n#include <stdio.h>\n#include "hello.h"\n\nint main()\n{\n    hello_world();\n    return 0;\n}\n\n// Note:\n// ---only on Windows---\n// Every function needs to be exported to be able to access the functions by dart.\n// Refer: https://stackoverflow.com/q/225432/8608146\nvoid hello_world()\n{\n    printf("Hello World\\n");\n} \n 利用  2019Fall可攜套件.7z \xa0\xa0 編譯為 hello_world.dll\xa0 \n gcc -shared hello.o -o ../hello_world.dll \n 以下列 hello.dart 呼叫 hello_world.dll 執行: \n // Copyright (c) 2019, the Dart project authors.  Please see the AUTHORS file\n// for details. All rights reserved. Use of this source code is governed by a\n// BSD-style license that can be found in the LICENSE file.\n\nimport \'dart:ffi\' as ffi;\nimport \'dart:io\' show Platform;\n\n// FFI signature of the hello_world C function\ntypedef hello_world_func = ffi.Void Function();\n// Dart type definition for calling the C foreign function\ntypedef HelloWorld = void Function();\n\nmain() {\n  // Open the dynamic library\n  var path = "hello_world.dylib";\n  if (Platform.isWindows) path = "hello_world.dll";\n  final dylib = ffi.DynamicLibrary.open(path);\n  // Look up the C function \'hello_world\'\n  final HelloWorld hello = dylib\n      .lookup<ffi.NativeFunction<hello_world_func>>(\'hello_world\')\n      .asFunction();\n  // Call the function\n  hello();\n}\n \n \n \n', 'tags': '', 'url': 'Dart FFI.html'}, {'title': 'Cango Library', 'text': 'https://www.arc.id.au/CanvasGraphics.html \xa0 是一套利用 Javascript 編寫的  Canvas 繪圖 程式庫. \n Cango user guide:\xa0 https://www.arc.id.au/CangoUserGuide.html \n', 'tags': '', 'url': 'Cango Library.html'}, {'title': 'Task3', 'text': 'Task3:\xa0 (佔學期成績 10%) \n 請充分了解\xa0 \n Dart for Absolute Beginners (2014) \n https://link.springer.com/book/10.1007/978-1-4302-6482-8 \n Listing 4-1 猜數字遊戲近端執行版本後, 設法結合 Html5 中的表單與 CSS 設定, 完成下列 dartpad 上與單一網頁版上的猜數字遊戲程式: \n \n 猜一個 1 ~ 100 間的整數:     \n \n \n \n 利用 Dartpad 與 Html5 Canvas 執行靜態繪圖 \n 了解如何 繪製中華民國國旗 \n 分組作業: 請討論如何完成美國國旗繪製 \n \n \n roc_flag.dart 程式碼: \n import \'dart:html\';\nimport \'dart:math\' as Math;\n\nCanvasElement canvas;\nCanvasRenderingContext2D ctx;\nint flag_w = 300;\nint flag_h = 200;\nnum circle_x = flag_w / 4;\nnum circle_y = flag_h / 4;\n\nvoid main() {\n  canvas = querySelector(\'#canvas\');\n  ctx = canvas.getContext(\'2d\');\n\n  drawROC(ctx);\n  querySelector("#roc").onClick.listen((e) => drawROC(ctx));\n  querySelector("#usa").onClick.listen((e) => drawUSA(ctx));\n  querySelector("#button").onClick.listen((e) => clearCanvas());\n}\n\nvoid drawUSA(ctx){\n  // 請畫出美國國旗\n  ctx.clearRect(0, 0, flag_w, flag_h);\n  ctx.font = "30px Arial";\n  ctx.strokeStyle = \'rgb(255, 0, 0)\';\n  ctx.strokeText("請畫出美國國旗", flag_w/6, flag_w/4);\n}\n\nvoid drawROC(ctx){\n  // 先畫滿地紅\n  ctx.clearRect(0, 0, flag_w, flag_h);\n  ctx.fillStyle = \'rgb(255, 0, 0)\';\n  ctx.fillRect(0, 0, flag_w, flag_h);\n  // 再畫青天\n  ctx.fillStyle = \'rgb(0, 0, 150)\';\n  ctx.fillRect(0, 0, flag_w / 2, flag_h / 2);\n  // 畫十二道光芒白日\n  ctx.beginPath();\n  num star_radius = flag_w / 8;\n  num angle = 0;\n  for (int i = 0; i < 25; i++) {\n    angle += 5 * Math.pi * 2 / 12;\n    num toX = circle_x + Math.cos(angle) * star_radius;\n    num toY = circle_y + Math.sin(angle) * star_radius;\n    // 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo\n    if (i != 0)\n      ctx.lineTo(toX, toY);\n    else\n      ctx.moveTo(toX, toY);\n  }\n  ctx.closePath();\n  // 將填色設為白色\n  ctx.fillStyle = \'#fff\';\n  ctx.fill();\n  // 白日:藍圈\n  ctx.beginPath();\n  ctx.arc(circle_x, circle_y, flag_w * 17 / 240, 0, Math.pi * 2, true);\n  ctx.closePath();\n  // 填色設為藍色\n  ctx.fillStyle = \'rgb(0, 0, 149)\';\n  ctx.fill();\n  // 白日:白心\n  ctx.beginPath();\n  ctx.arc(circle_x, circle_y, flag_w / 16, 0, Math.pi * 2, true);\n  ctx.closePath();\n  // 填色設為白色\n  ctx.fillStyle = \'#fff\';\n  ctx.fill();\n}\n\nvoid clearCanvas(){\n  ctx.clearRect(0, 0, flag_w, flag_h);\n}\n \n 上述猜數字遊戲利用 dart2js 將 Dart 程式轉為 Javascript 後, 可以直接在網頁中執行. \n 假如希望繪製曲線,可以使用\xa0 https://github.com/aab29/bezier.dart', 'tags': '', 'url': 'Task3.html'}, {'title': 'Batch Command', 'text': '使用者在維護 CMSiMDE 倉儲與網頁時, 經常需要在瀏覽器中檢視動態與靜態頁面資料, 其中包括以 python 執行位於 cmsimde 子目錄中的 wsgi.py\xa0 以及位於倉儲根目錄中的 http-server.py, 為了方便, 可以在 y:\\ 目錄建立下列兩個命令批次檔案: \n cp.bat - 啟動 wsgi.py 並且在瀏覽器開啟 https 9443 動態網頁 \n @echo off\ny:\ncd tmp\\cp2019\\cmsimde\nstart /WAIT python wsgi.py | sleep 2 | start chrome https://localhost:9443 \n \n \n \n 其中的 | 是同時執行 wsgi.py 的啟動以及瀏覽器網頁的開啟 \n 而 cph.bat - 啟動 http-server 並且在瀏覽氣開啟 https 8444 靜態網頁 \n @echo off\ny:\ncd tmp\\cp2019\\\nstart /WAIT python http-server.py | sleep 2 | start chrome https://localhost:8444 \n \n \n \n 至於近端倉儲維護告一段落後, 啟動 gitextensions 開啟 cp2019 倉儲時, 使用: \n cpg.bat \n \n \n @echo off\ny:\\\ny:\\cad\\201906_fall\\data\\GitExtensions\\gitextensions.exe  browse y:\\tmp\\cp2019\\ \n \n \n', 'tags': '', 'url': 'Batch Command.html'}, {'title': 'Temp Conv', 'text': '前端介面與後端運算框架 \n 機械設計流程經常使用的單位換算程式, 可以直接寫成純 Dart 程式, 在 Dartpad 上運算, 也可以配合 html 與 css, 寫成網際程式的前端介面, 在 Dartpad 上利用 html 表單輸入執行運算, 或利用 dart2js 工具, 將 Dart 轉成 Javascript 後, 嵌入 html 網頁中執行運算. \n 第三種 Dart 前端程式, 若採用 Flutter SDK 的模式編寫, 可以選擇性轉為網頁式或手機式的程式執行溫度轉換運算. \n 第四種 Dart 前端程式, 則可以配合以 Dart 或 Python 編寫的伺服器端程式, 讓使用者經由 Dart 的 html 或手機介面取得輸入, 然後將資料送到後端伺服器執行運算後, 將結果傳回前端展示. \n 若以\xa0 https://github.com/KmolYuan/Pyslvs-UI \xa0所提供的平面機構分析與合成程式庫而言, 利用 Dart 的 html 或手機介面取得平面機構分析與合成所需的參數, 然後透過 Python Server 端呼叫, 由 Cython 所轉換成的 C++ 動態連結程式庫的運算, 將是最方便的平面機構設計流程. \n 透過此一運算框架, 機械設計工程師可進一步透過手機取得既有機構的影像檔, 送至後端的智能辨識與分析運算系統執行演化運算, 待設計運算取得可用結果後, 再以 email 或簡訊通知使用者. \n 溫度轉換範例 \n $$ \\large {celsius = 5/9 ( fahrenheit − 32)} $$ \n \n  取 Dart 程式的按鈕  \n 純 Dart 程式 \n Temp 1 \n Html 程式 \n Temp 2   Python \n Flutter 程式 \n 溫度轉換 \n  內建放入的 Dart 原始碼  \n 放大   回復 \n \n 利用 Python Flask 網際框架編寫的伺服器端溫度轉換程式碼: \n import flask\n# 導入 flask_cors 模組中的 CORS\n# 目的在讓伺服器可以被遠端的 Dart 程式跨網域擷取資料\nfrom flask_cors import CORS\n\napp = flask.Flask(__name__)\n# 讓應用程式啟動後, 可以跨網域被截取資料\nCORS(app, support_credentials=False)\nglobal data\n\n@app.route(\'/\', methods =[\'POST\', \'GET\'])\ndef root():\n    if flask.request.method == \'POST\': \n        data = flask.request.form[\'data\'] \n        print(data)\n        resp = {"data": data}\n        output = flask.json.dumps(data)\n    else:\n        # 將 Python 中的 dictionary 資料透過 json 格式送出後\n        # 讓遠端的 Dart 程式可以擷取\n        data = {"a": 1, "b": data+"yen", "c": "字串"}\n        output = flask.json.dumps(data)\n    return output\n    \n@app.route(\'/<name>\', methods=[\'POST\', \'GET\'])\ndef convert(name):\n    #name[-1] 為字串最後一個字元\n    # name[:-1] 則為數字\n    if name[-1] is "F" or name[-1] is "f":\n        # 表示要將華氏溫度轉為攝氏\n        return FtoC(name[:-1])\n    else:\n        return CtoF(name[:-1])\n    \n#celsius = 5/9 ( fahrenheit − 32)\n#定義一個 celsius 轉 fahrenheit  函式\ndef CtoF(c):\n    return "攝氏" + c + "度=華氏" + str(round(int(c)*9/5 + 32, 2)) + "度"\n\n#定義一個 celsius 轉 fahrenheit  函式\ndef FtoC(f):\n    return "華氏" + f + "度=攝氏" + str(round((int(f) - 32)*5/9, 2)) + "度"\n\n\nif __name__ == \'__main__\':\n    # 內建的 Flask Web 啟動埠號為 5000\n    app.run() \n Write a program that estimates the temperature in a freezer (in °C) given the elapsed time (hours) since a power failure. Assume this temperature ( T ) is given by \n $$ \\large{ T = 4t^2/(t+2) - 20 } $$ \n where t is the time since the power failure. Your program should prompt the user to enter how long it has been since the start of the power failure in whole hours and minutes. Note that you will need to convert the elapsed time into hours. For example, if the user entered 2 30 (2 hours 30 minutes), you would need to convert this to 2.5 hours. \n Flutter Form \n https://medium.com/flutterpub/sample-form-part-1-flutter-35664d57b0e5 \n \n', 'tags': '', 'url': 'Temp Conv.html'}, {'title': 'Five-pointed_star', 'text': '\n 假設 O 點為圓心點, 座標為 (x, y), OA 為圓半徑, 角 AOB 為 72 度, 角 COB 則為 36 度, 因為 OB = r*cos(72 角度) = OC*cos(36 角度), 因此 OC = r*cos( 72 角度)/cos(36 角度) \n https://en.wikipedia.org/wiki/Five-pointed_star \n 為何要畫五芒星與美國國旗? \n 繪製五芒星其實是一個利用 Dart 程式練習平面幾何圖形練習的題目, 其中牽涉對於三角函式的使用, 整數與浮點數的轉換, Dart 函式的設計與呼叫, 重複迴圈的使用, 以及 html 表單及 css 的整合應用等. \n 該如何畫? \n 因為想要透過參數來控制五芒星的大小與位置, 甚至是旋轉特定角度後的五芒星, 因此先找出繪製一個五芒星可能牽涉到的調控參數. \n 五芒星若從五等分一個圓周來看, 位置可以用圓心 x, y 座標還加以界定, 而圓的大小則可以用圓半徑加以控制, 另外可以透過 solid 變數為 true 或 false 來控制實心或空心, 至於五芒星的旋轉角度, 可以用 theta 浮點數來表示, 最後則是畫線或填入的顏色值, 可以用 color 加以表示, 因此希望設計的五芒星繪圖函式可以設定為: \n fivePointStar(x, y, r, solid, theta, color) \n 五芒星步驟一: \n 以下採用 GIST 存放 Dart 程式, 可以在倉儲資料尚未提交推送之前進行 Dartpad 的引用: \n https://dartpad.github.io/?id=80cd4c0611087adf303036b3a3b1ac73 \n 步驟二: \n 接下來希望在 Dartpad 上加入 html 與 css, 用一個圓來代表所要繪製的五芒星. 利用 canvas circle 當作關鍵字搜尋, 找到\xa0 https://www.w3schools.com/tags/canvas_arc.asp \xa0 \n 利用 Javascript 畫圓的程式碼: \n var c = document.getElementById("myCanvas");\nvar ctx = c.getContext("2d");\nctx.beginPath();\nctx.arc(100, 75, 50, 0, 2 * Math.PI);\nctx.stroke(); \n 與 Dart html canvas 繪圖的範例, 可以參考: \n https://dartpad.github.io/?id=b51f4d2a76e394421057a70e7d281b66 \n 其中包括按鈕的設計以及 Canvas 繪圖的方法. \n 步驟三: \n 假如可以取得五芒星的五個內點座標, 並且了解 Dart 數列與迴圈的用法, 應該就能夠透過  Canvas 繪圖程式 的引導, 完成單一空心或實心五芒星的繪圖. \n 回頭在 Dartpad 上完成步驟一的圓形畫圖 \n 分別導入 html 與 math 程式庫: \n https://dartpad.github.io/?id=11d8706a650647126d106dce381558e4 \n 接著完成畫圓的程式設計: \n https://dartpad.github.io/?id=28bd698e8bb6d89160f7ff3d9dc1bc29 \n 步驟四: \n 接著畫出對應圓與五芒星五個外點所連成的五條直線: \n https://dartpad.github.io/?id=b682e3a3ec6f244a32b701c7629620cf   \n 步驟五: \n 最後設法連接五芒星的五個外點與五個內點, 完成空心與實心的五芒星繪圖: \n https://dartpad.github.io/?id=0a8eace1910610756ea4d6b92e5cce67 \n \n', 'tags': '', 'url': 'Five-pointed_star.html'}, {'title': 'Tetris', 'text': '俄羅斯方塊: \n https://www.colinfahey.com/tetris/tetris.html \n https://leeyiyuan.info/tetrisai/ \xa0( https://github.com/LeeYiyuan/tetrisai ) \n https://github.com/fthomasmorel/Tetris-AI \n https://github.com/nuno-faria/tetris-ai \n https://github.com/OliBomby/Tetris-AI \n \n \n', 'tags': '', 'url': 'Tetris.html'}, {'title': 'Task4', 'text': 'Task4:\xa0 (佔學期成績 20%) \n 利用 Dartpad 與 Html5 Canvas 執行動態繪圖 \n 了解如何製作 貪食蛇遊戲 \n 了解如何製作 乒乓球遊戲 \n 分組作業: 請將上述所有 Dartpad 上的程式轉為單一 Html 網頁程式, 並上傳到各分組網站中 \n', 'tags': '', 'url': 'Task4.html'}, {'title': 'Project', 'text': 'Project: (佔學期成績 30%) \n 請根據 \n Practical Flutter (2019) \n https://link.springer.com/book/10.1007/978-1-4842-4972-7 \n 中的範例說明, 完成各組期末專案. \n 期末分組專案: 請根據上述 Task1 ~ Task4 的內容做為參考, 討論如何完成一個能夠在網頁與手機上執行的期末專案. \n 參考資料: \n https://pub.dev/packages/flutter_3d_obj \n https://github.com/jenthone/flutter_paint \n https://github.com/TheAlphamerc/Flutter_ml_Vision \n https://github.com/SHARONZACHARIA/Deploy-ML-model \n https://github.com/snowballdigital/flutter-unity-view-widget \n https://github.com/MadhavPruthi/gps-logger-flutter \n https://github.com/maravger/project-mlbg \n https://github.com/iampawan/PokemonApp \n \n', 'tags': '', 'url': 'Project.html'}, {'title': 'Github', 'text': '基本原理 \n 分散式版次管理 \n Github 是一個採用 git  分散式版次管理 \xa0(Distributed Version Control System, DVCS) 技術的網站服務, 與 git 類似的技術 還有   Fossil SCM 、 Bazaar 、 Mercurial  等. \n 分散式版次管理 系統主要用於協同內容開發, 參與協同的成員可以 同步 在近端電腦上, 無需上網的情況下執行內容附加, 當各成員完成一定內容改版後, 採 非同步 對遠端共用的伺服器進行改版, 若該成員的改版內容與遠端內容產生衝突時, 則由該成員解決衝突內容後, 決定遠端的協同內容版本. \n 分散式版次管理 系統的重要特性是, 只對內容執行附加, 因此多人協同的資料 不會丟失 , 且各成員在提交推送、解決衝突後合併、以及建立版本分支進行測試的工作模式下, 各成員近端皆保有一份與遠端相近版本的內容, 且有彼此互相建立 完整備份 資料的功能, 即使特定近端內容毀損, 也能透過 clone 在近端取得一份最新版本內容, 若遠端資料毀損, 則可由任一套近端版本取代. \n 分散式版次管理 系統的另一個特性是, 各成員可以利用分支切換 (branch checkout),  查驗各版本 的完整內容, 且各成員在對特定版本附加內容時, 並 不會重複存檔 , 只透過指標技術, 對應至特定資料內容. \n Github Pages \n Github Pages  是 Github 公司對用戶系統倉儲所提供的一項服務, 允許使用者利用倉儲主分支 (master branch) 內容, 或主分支中的 docs 目錄, 建立 WWW 網站, 且 Github 會將使用者所指定的  Github Pages  內容與 \n 帳號.github.io/倉儲名稱 \n 網站名稱對應. \n 且若使用者所建立的  Github Pages  倉儲, 命名為 " 帳號.github.io" 時, 此一特定倉儲名稱即會設定成網站名稱. \n CMSiMDE  網站內容管理系統 \n CMSiMDE  是一套以  Python   Flask  網際框架編寫的內容管理系統, 執行時需要  flask ,  bs4 ,  lxml  與  flask_cors  等模組. \n CMSiMDE  的引用, 建議採用  git submodule  add 的模式, 以方便隨時取得\xa0 CMSiMDE \xa0系統的最新版本內容. \n CMSiMDE \xa0的設計是在使用者的倉儲中, 以子模組 cmsimde 的目錄名稱存在, 且使用者必須將 up_dir 的內容, 複製到使用  Github Pages  的倉儲中,\xa0 Github Pages \xa0支援動態模式與靜態模式, 動態模式以 cmsimde 目錄中的 wsgi.py 啟動, 當使用者進入 cmsimde 子目錄執行 \n python wsgi.py \n 時, 意即要使用 Python 解譯器 (interpreter) 執行 wsgi.py 程式, 啟動後使用者可以利用瀏覽器  https://localhost:9443 \xa0進入, 以 admin 作為預定地管理者密碼登入編輯內容. 且利用程式系統中的 WSciTE 編輯器, 開啟倉儲中的 http-server.py, 且以 Tools->Go 執行後, 可在瀏覽器  https://localhost:8444 \xa0檢視此一動態內容管理系統 content 目錄中的靜態內容, 而此一靜態內容即是使用者將\xa0 CMSiMDE \xa0倉儲送到\xa0 Github Pages \xa0所將呈現的 \n 帳號.github.io/倉儲名稱 \n 網站內容. \n 建立 cp2019 倉儲及對應的 CMSiMDE Github Pages 網頁 \n 了解基本的 Git 指令與 Github 系統的應用之後, 產生出對 GitExtensions 工具的需求, 也產生出對於透過 SSH keys 提交倉儲版本的需求, 以簡化改版流程. \n https://2019wcm.blogspot.com/search/label/GitExtensions \n https://2019wcm.blogspot.com/search/label/ssh \n 申請 Github 帳號 \n 登入 @gm 電子郵箱, 然後以學號申請 Github 帳號, 待驗證所使用的學號@gm 電子郵箱後, 即可建立 cp2019 倉儲, 特別注意新增 public repository 時, 可啟用 README.md, 隨即可以在近端以 \n git clone  https://github.com/學號/cp2019.git \n 將遠端 Github 倉儲中的資料, clonr 至 y:\\tmp 目錄的 cp2019 目錄中. \n clone 後的 cp2019 目錄有 .git 目錄, 存放該倉儲的設定與版本資料, 以及 README.md 檔案. \n 在 .git 目錄中, 與使用者相關的是 config \n 以子模組方式納入 CMSiMDE \n 利用 git submodule add 納入 CMSiMDE 網際內容管理系統的程式碼 \n https://github.com/mdecourse/cmsimde \n 利用命令列視窗, 更換目錄至 y:\\tmp\\cp2019 之後, 執行 \n git submodule add https://github.com/mdecourse/cmsimde.git cmsimde \n 意即, 在此目錄中, 將 https://github.com/mdecourse/cmsimde.git 倉儲資料納為近端 cmsimde 目錄的內容, 且作為 submodule, 也就是設定一個倉儲的子模組, 並將此子模組與 https://github.com/mdecourse/cmsimde.git 倉儲目前的最新版本內容. \n 將子模組中 up_dir 目錄中的內容往前搬一個目錄 \n 在 y:\\tmp\\cp2019\\cmsimde 目錄中, 以 \n python wsgi.py \n 就可以啟動近端的動態網際內容管理系統, 作為近端改版之用, 可以瀏覽器中的 https://localhost:9443 連接所啟用的 CMS (Content Management System). \n 並以 admin 管理者密碼登入. \n 進入 config 修改網頁標題, 並且修改倉儲中的 init.py, 修改 site_title \n 改版後要推送資料前, 可以利用 generate_pages 將內容轉為動態網頁後, 可以利用 SciTE 開啟倉儲中的\xa0http-server.py 檔案後以 Tools -> Go 執行, 可以在瀏覽器中以  https://localhost:8444 \xa0檢查近端的靜態網頁內容, 確定無誤後. 則必須再退回 y:\\tmp\\cp2019 目錄之後, 必須完成 git config 的 user.name 與 user.email 之後, 可以利用: \n git add . git commit -m "提交說明" git push \n 以 SSH 對 cp2019 倉儲進行改版 \n 如何產生所需的 keys, 放在哪裡, public key 要送到哪裡, 設定如何寫, 在 http 模式下, 代理主機如何執行設定, 在 ssh 模式下, 代理主機要如何設定? 若近端啟動後使用超過一個 github 帳號身分, 又如何設定 http 與 ssh 模式下的倉儲改版與提交? \n 如何 git clone 帶有子模組的倉儲 \n git submodule 使用說明 \n 當在近端 git clone 帶有子模組的倉儲時, 首先: \n git clone 倉儲_URL.git 近端倉儲名稱 \n 之後, 以 git submodule init 啟始子模組, 接著以 git submodule update 下載所對應版本的子模組內容. \n 假如倉儲中所使用的 submodule 已經改版, 希望將先前所引用的版本升級至最新版本 (例如: master 分支內容), 可以進入該子模組所在目錄, 然後執行: \n git pull origin master \n 為何倉儲中要引用子模組? \n 子模組架構的設計與引用, 可以讓子模組的開發者根據需求隨時改版, 而引用者只需要確立所引用的子模組版次號, 即可在原始引用組態 (組成內容與狀態) 下正確協同工作. \n 在機械設計流程, 想像所有系統與元件都是虛擬物件, 與 github 中的倉儲程式碼類似. \n 當導入一只特殊規格的電動馬達後, 配合減速機與機構執行所需工作, 若將該馬達當成 git 的子模組, 負責研發此電動馬達的團隊, 可以不斷根據新技術的導入或修正先前的設計, 所產生新的馬達版本, 不會影響使用舊馬達版本的用戶. (請注意, 引入子模組之後的倉儲, 在其 .git 目錄中的 config 與倉儲目錄中的 .gitmodules 都註記所引用的子模組來源.) \n 這時引用該馬達的機械設計模擬系統, 在不變更使用該馬達元件版本的情況下, 原始設計可以繼續出貨, 若需配合該馬達的新功能而修改其他設計之後, 只需要執行 git submodule update, 就可以取得該馬達的最新型功能, 產生最新版的機械設計內容.\xa0 \n 各組利用 Python 程式模組, 練習建立並使用 git 子模組. \n', 'tags': '', 'url': 'Github.html'}, {'title': 'Github Guide', 'text': 'https://guides.github.com/ \n https://guides.github.com/activities/hello-world/ \n https://paulhammant.com/2019/07/21/using-git-in-business-and-government/ \n', 'tags': '', 'url': 'Github Guide.html'}, {'title': 'Fossil SCM', 'text': 'https://fossil-scm.org \xa0是由  Richard Hipp  所創建的一套專門用來管理  SQLite  資料庫系統的分散式版次管理系統. \n (註:  為何 SQLite 原始碼不使用 Github 管理? ) \n (註:  針對 Fossil SCM的疑問與批評 ) \n (註:  自架類似 Github 的伺服系統 ) \n Fossil SCM 的原始碼位於\xa0 https://fossil-scm.org/home/dir?ci=tip \n (註: 如何利用  MSYS2 \xa0在 Windows 10 環境下 編譯 帶有  OpenSSL  的 fossil.exe?) \n (註: 如何延伸 Fossil SCM, 編寫與機械設計流程相關的 延伸程式 ) \n (註: 如何將 Fossil SCM 與機電資虛擬或實體裝置結合, 成為能夠自動擷取具分散式版次管理架構的大數據資料來源.  1 ,  2 ,  3 ) \n 在 Windows 10 環境下學習使用 Fossil SCM 的第一步就是從  https://fossil-scm.org/home/uv/download.html \xa0下載 fossil.exe. \n 下載後可將 fossil.exe 放在隨身系統 data 目錄中 (也就是啟動 start.bat 後, 設為隨身碟虛擬根目錄的 y:\\), 並且將 y:\\ 納入命令搜尋路徑中. 就可以利用\xa0 \n fossil version \n 查看目前所使用的 fossil.exe 版本. \n 一般在 KMOLab 的課程中, 是利用 Virtualbox 的 Ubuntu 虛擬主機配置 Fossil SCM 伺服器, 意即在 Ubuntu 中下載 Linux 版的 fossil, 並且透過與  Stunnel  的整合設定, 讓 Fossil SCM 可以隨 Ubuntu 伺服器開機啟動. \n 初學者在配置 Windows 10 client 端的 fossil.exe 與 Ubuntu 伺服器端的 fossil 時, 必須注意兩端所使用的 fossil 版次是否一致. 否則將會導致部分新功能無法匹配. \n 以下用來在各班分組學習使用\xa0 Fossil SCM 的規劃是, 以組為單位下載已經配置 Fossil SCM 的 Virtualbox 虛擬主機 Ubuntu 伺服器系統: \n pyslvs, uwsgi, fossil_scm 以及 squid 伺服器的 Ubuntu 18.04.vdi 下載 \xa0(12GB) \n 可以將此一虛擬主機檔案放在各組組長電腦硬碟中, 學習如何利用\xa0 Virtualbox 虛擬主機中的橋接網路 (bridged network) 設定, 讓此一帶有 Fossil SCM 系統的伺服器, 可以在電腦輔助設計室讓所有組員擷取, 以學習如何將先前送到 Github 的版本資料改由 Fossil SCM系統進行管理. 或者設法同步置放在 Github 與 Fossil SCM 伺服器中的版本資料. \n 另外, 也可以在此一 Ubuntu 虛擬主機自行設法配置 Linux 版本下的  Dartpad , 了解  Dartpad  系統中前端 Javascript 程式 (由 dart 編寫轉出) 如何與後端的  Dart service \xa0結合運作. \n 而  Dartpad  所使用的網際伺服器, 前端 Javascript 與後端 dart 整合運用的模式, 當計算機程式的學習透過  Flutter  將前端的\xa0dart 轉換成  Android  或  IOS  手機介面, 即是在  KMOLab  希望利用 計算機程式 、網際內容管理、 電腦輔助設計實習 與協同產品設計實習等課程所要達成的目標之一. 透過網際與手機介面程式當前端, 可以利用照片與影片取得與機械設計流程相關的資料, 然後隨送到後端的設計分析程式進行辨識或運算, 得出結果後, 再設法通知位於前端的工程師. 或者可以利用隨身的瀏覽器、手機或平板應用程式, 監控或操控位於遠端的機電資虛擬或實體系統. \n 參考資料 \n http://mde.tw/2017springcd/blog/intro-fossil-scm.html \n Why Fossil-SCM is an excellent choice for introductory programming courses.pdf \n', 'tags': '', 'url': 'Fossil SCM.html'}, {'title': 'Fossil 伺服器', 'text': '本計算機課程的 dart 程式, 可以寫在  Gist , 然後從  Dartpad  以"?id=gist_版次編號 "導入, 由於每一筆\xa0 Gist \xa0都是 Git 倉儲, 除了具備版次外, 還能夠同時包含 html 與 css 檔案, 因此本課程所使用的  https://dartpad.github.io \xa0\xa0可以在將網際 Dart 程式配置到單一 html + javascript 程式之前, 直接在\xa0  Dartpad  上進行測試. \n 假如在近端或遠端所建立的 Fossil SCM 伺服器也能具有上述  Dartpad  結合  Gist  的功能, 機械設計工程師在網際環境執行協同產品設計時, 將可同時運用 Github 與自建 Fossil SCM 伺服器執行資料同步. \n Dartpad 也可以透過\xa0embed-dart.html,\xa0 embed-html.html 或 embed-flutter.html , 以類似 \n https://dartpad.github.io/embed-dart.html?gh_owner=mdecourse&gh_repo=cp2019&gh_path=downloads/dart_ex/mass_spring_damping&theme=dark \n \xa0指定 Github owner, repo, path 與 theme 的方式引用倉儲中的程式碼, 而此種方式或可透過修改 Dartpad 程式碼, 在 Fossil SCM 中的 doc 路徑中實現. \n Fossil SCM 操作練習 \n 下載\xa0 pyslvs, uwsgi, fossil_scm 以及 squid 伺服器的 Ubuntu 18.04.vdi  \xa0(12GB), 存入已經格式化為 extFAT 的隨身碟中. 利用 Windows 10 所安裝的 Virtualbox 納入此 vdi 虛擬主機, 記憶體至少 4GB, 網路設定採用 host-only. 啟動後的管理者帳號與密碼都是 kmol2019. \n 登入 Ubuntu 18.04 操作系統後, 以滑鼠點選左上角的 Menu->System Tools->MATE Terminal, 開啟終端機視窗. 在命令列中輸入: \n ifconfig \n 可以發現虛擬主機的網路的 IPv4 設定將網址設為 192.168.56.102, 表示 Windows 10 操作系統中的 Virtualbox Host-Only Ethernet Adapter 中的 IPv4 網路位址必須配合設為\xa0 192.168.56.101, 才能與目前啟動的 Ubuntu 伺服器互動. \n 確認 Windows 10 與 Host-Only 的 Ubuntu 網路已經連通, 可以在 Windows 命令列中以: \n ping -t 192.168.56.101 \n ping -t 192.168.56.102 \n 若封包回應為: \n Reply from 192.168.56.101: bytes=32 time<1ms TTL=64 \n Reply from 192.168.56.101: bytes=32 time<1ms TTL=64 \n 使用者就可以在 Windows 10 環境, 確認瀏覽器不會透過代理主機對 192.168.56.* 網址連線, 就可以開啟  https://192.168.56.102:8443 \xa0中的 CMSiMDE 動態網際內容管理系統. \n 此一Ubuntu buntu 伺服器 CMSiMDE 的設定可以從 /etc/nginx/sites-available/default 與 /home/kmol2019/wsgi_ini/uwsgi.ini 等兩個檔案中的內容確定. \n 若希望列出 Ubuntu 中目前已經啟動的系統服務, 可以在終端機視窗中輸入: \n service --status-all \n 其中 stunnel4 與 uwsgi 等兩個服務都已經啟動, 但是 stunnel4 目前隨機啟動的設定已經關閉, 若要在 5443 埠號啟動 Fossil SCM, 必須: \n 修改 /etc/default/stunnel4, 修改 ENABLED=1 \n 然後以: \n sudo /etc/init.d/stunnel4 restart \n 就可以瀏覽器開啟  https://192.168.56.102:5443 \xa0中的 Fossil SCM. 而此 Ubuntu 伺服器中的 Fossil SCM 管理者帳號密碼也都預先設定為 kmol2019. \n (註: 目前此一 Ubuntu 18.04 伺服器中所安裝的 fossil 為 2.8 版, 若 Windows 10 使用 2.9 版的 fossil.exe, 則伺服器中的 fossil 也建議升級為對應的 2.9 版) \n (註: 由於使用 Host-Only 的 Virtualbox 虛擬主機, 只允許其實體電腦上的 Windows 10 操作系統中的網路連線, 與此 Windows 10 同區的電腦或外部網路上的電腦都無法對此一 Host-Only 網路上的虛擬主機連線, 因此可以使用 admin 作為 CMSiMDE 系統的管理者密碼, 也可以使用 kmol2019 作為伺服器上 Fossil SCM 系統的管理者帳號密碼. \n 但是, 若此一 Virtualbox 虛擬主機改以橋接上網 (bridged network), 則其網路位階將提升與 Windows 10 操作系統的網路卡相同, 此時的 Ubuntu 伺服器若無進一步的防火牆保護設定, 與 Windows 10 同區的電腦將可以直接透過 8443 與 5443 對此伺服器中的 CMSiMDE 與 Fossil SCM伺服器連線, 這時使用者就必須要修改此兩項服務系統的管理帳號.) \n 參考資料 \n https://2019wcm.blogspot.com/search/label/Ubuntu \n', 'tags': '', 'url': 'Fossil 伺服器.html'}, {'title': 'Fossil 操作', 'text': '若採用\xa0 pyslvs, uwsgi, fossil_scm 以及 squid 伺服器的 Ubuntu 18.04.vdi \xa0 \xa0(12GB) 在\xa0 Virtualbox 中建立虛擬主機, 可以在  https://192.168.56.102 \xa0使用動態的 CMSiMDE 網際內容管理系統, 接下來就可以針對此一動態系統在 Windows 10 或 Ubuntu 環境下, 將 CMSiMDE 網際內容管理系統的靜態網頁 (也就是送到 Github 倉儲中使用 Github Pages 建立 cp2019 網頁的同一套靜態網站系統) 送到  https://192.168.56.102:5443 \xa0Fossil SCM 伺服器中. \n 在 Fossil SCM 伺服 CMSiMDE 靜態網站系統之前, 必須了解 Fossil SCM 並無像 Git submodule 子模組的功能設計, 因此若單獨使用 Fossil SCM 管理 CMSiMDE 動態或靜態網站內容, 將無法取得父模組與子模組彼此版次區隔且能自動整批更新子模組內容的好處. \n 因此, CMSiMDE 動態與靜態內容的管理建議同時採用 Github 與 Fossil SCM, 設法在兩套系統中針對 CMSiMDE 倉儲資料保持同步, 如此便可以同時取得使用 Github 與 Fossil SCM的雙重優點. \n (註: Fossil SCM 中內建的 Forum 以及 doc 系統中可以直接指定版次, 以及部分內容可以 uversioned 方式儲存等功能, 可以視為相較於 Github 系統的優點) \n 利用 Fossil SCM 伺服 CMSiMDE 靜態網站 \n 首先建議在 y:\\ 中以 mkdir fossil 建立目錄, 之後與 Fossil SCM 有關的近端資料, 都將存在 y:\\fossil 目錄, 接著在 y:\\fossil 再建立 wd 目錄, 代表之後各相關 .fossil 檔案將放在 y:\\fossil 目錄中, 而解開 .fossil 壓縮檔案後, 將依照該倉儲名稱, 分別存在 working directory y:\\fossil\\wd 目錄下, 例如: 目前在 Windows 10 命令列視窗中執行: \n y:\\fossil>fossil clone https://192.168.56.102:5443/kmol2019 kmol2019.fossil \n 並回答 a 或 y 表示要接受認證資料後, 就可以取得 192.168.56.102 主機上的 kmol2019 Fossil SCM 倉儲檔案, 而且這個檔案是依照 SQLite 資料庫格式的壓縮檔. \n 接下來進入\xa0 y:\\fossil\\wd 目錄建立 kmol2019 目錄, 準備要將 kmol2019.fossil 在此一目錄中解開, 因此進入\xa0 y:\\fossil\\wd\\kmol2019 目錄執行  : \n y:\\fossil\\wd\\kmol2019>fossil open ./../../kmol2019.fossil \n 表示要將位於兩層目錄之外的 kmol2019.fossil 倉儲壓縮檔案, 在\u3000 y:\\fossil\\wd\\kmol2019 目錄中解開. \n 解開壓縮檔案後, 進入 y:\\fossil\\wd\\kmol2019 目錄, 只發現一個\xa0_FOSSIL_ 檔案, 而此一壓縮檔案就等同 Github 倉儲中的 .git 目錄, 儲存與 Fossil SCM 倉儲有關的版本與設定資料. \n 將 Github Scrum-4 cad2019 倉儲送到 Fossil SCM \n 首先利用: \n git clone  https://github.com/scrum-4/cad2019.git \xa0將倉儲基本內容複製到近端 cad2019 目錄中, 接者必須進入 cad2019 目錄中繼續執行 git submodule init 與 git submodule update, 以便將 cmsimde 目錄中的資料也取至近端. \n 接下來只要將 cad2019 目錄中的所有資料, 複製到\xa0 y:\\fossil\\wd\\kmol2019\xa0 目錄中, 然後利用: \n y:\\fossil\\wd\\kmol2019>fossil add . \n 對 kmol2019.fossil 的工作目錄新增前述所加入的 cad2019 倉儲資料內容. \n 接著透過: \n y:\\fossil\\wd\\kmol2019>fossil\xa0commit -m "add scrum-4 cad2019 content" \n 在近端提交所增加的內容. \n 最後再執行: \n y:\\fossil\\wd\\kmol2019>fossil\xa0 push https://kmol2019@192.168.56.102:5443 \n 輸入與 kmol2019 帳號對應的密碼後, 即可將近端\xa0 y:\\fossil\\wd\\kmol2019 (也就是\xa0y:\\fossil\\kmol2019.fossil 的工作目錄) 的改版資料, 同時更動近端的 kmol2019.fossil 與遠端對應的 /home/kmol2019/repository/kmol2019.fossil 倉儲壓縮檔案. \n 完成上述 Fossil SCM 的倉儲新增提交與推送, 就可以在 \n https://192.168.56.102:5443/kmol2019/doc/trunk/index.html \n 連結到對應 CMSiMDE 靜態網站. 其中\xa0 https://192.168.56.102:5443/kmol2019 \xa0是倉儲所在地, 而 doc 表示 Fossil SCM 針對每一個倉儲提供 document 的 html 格式資料檔案連結功能, 而且 doc/trunk 表示擷取此倉儲目前的最新版本, 而 doc/trunk/ 之後的 index.html 表示希望從倉儲根目錄中的 index.html 檔案作為網站索引超文件檔案. \n 從\xa0 https://192.168.56.102:5443/kmol2019/timeline \xa0倉儲的時間軸中, 可以檢視各提交推送版本的序號, 前述 doc 後若將 trunk 換成先前所提交的版本序號, 使用者將可利用: \n https://192.168.56.102:5443/kmol2019/doc/版本序號/index.html \xa0 \n 直接連線到 kmol2019 倉儲所對應的版本序號網站. \n 在 Ubuntu 新增 Fossil SCM 倉儲 \n 使用者在 Ubuntu 伺服器上建立其他倉儲的方法: \n /home/kmol2019/repository/$ fossil init cp2019.fossil \n 表示要在 /home/kmol2019/repository 目錄中, 起始一個 Fossil SCM 倉儲, 名稱為 cp2019.fossil. \n 而此一倉儲可以利用 https//192.168.56.102:5443/cp2019 擷取. 而其他 fossil clone, fossil add, fossil commit 與 fossil push 的應用與上述流程相同.\xa0 \n 接下來必須深入探討的是: \n 除了 https, Fossil SCM 能否以 ssh 連線? \n Fossil SCM 倉儲若要管理 .git 目錄, 該如何設定? \n Github 與 Fossil SCM 倉儲該如何保持同步? \n Fossil SCM 的網際介面如何使用? \n', 'tags': '', 'url': 'Fossil 操作.html'}, {'title': 'Fossil 指令', 'text': "每一個 .fossil 在該操作系統中都存在一組管理者密碼, 若要修改特定 .fossil 檔案中所存的用戶密碼, 可以利用 fossil sql 指令. \n 以 fossil sql 指令擷取 .fossil 檔案內容 \n 使用者以 fossil init foo.fossil 建立倉儲檔案後, 除了使用 sqlite3 命令檢視 fossil 倉儲內容外, 也可以利用 fossil 指令查驗倉儲資料庫檔案的內容. \n fossil sql -R foo.fossil \n 進入 sqlite 指令環境後, 可以利用 .schema user 查驗 user 資料表的欄位設計. \n 以 \n select login, pw, cap from user; \n 可以查詢目前 foo.fossil 檔案中 user 資料表 login, pw 與 cap 等3個欄位的資料內容. \n 若要更改特定 login 登入帳號的 pw 或 cap 可以使用下列 sqlite3 SQL 語法: \n update user set pw='mynewpassword' where login='myloginaccount'; \n update user set cap='s' where login='myloginaccount'; \n \n Fossil SCM 設定中, 內定的 autosync 為 on, 表示使用者若採用: \n fossil clone  https://user:password@ 192.168.56.102:5443 kmol2019.fossil \n 將遠端倉儲 clone 至近端 kmol2019.fossil 壓縮檔案後. 一旦在工作目錄中 fossil add 與 fossil commit 之後, Fossil 會自動執行後續 fossil push 的動作, 而且此一推送會同時將改版資料送到近端與工作目錄對應的 .fossil 檔案倉儲外, 也會同時將改版資料推送到 .fossil 對應的遠端倉儲中. \n 換言之, Fossil SCM 針對從 fossil clone 開始的一連串指令執行, 會因為 settings 的差異而有不同的新增, 提交與推送流程, 假如 fossil clone 時採用: \n fossil clone  https://192.168.56.102:5443 \xa0kmol2019.fossil \n 之後, 在近端以 fossil open 解開到近端工作目錄後, 必須利用: \n fossil push  https://usesid@fossil_server_url \n 然後輸入與 userid 對應的密碼後, 才能退送到遠端倉儲. 至於先前已經配合以: \n fossil clone\xa0 https://user:password@ 192.168.56.102:5443 kmol2019.fossil \n 取得倉儲, 但並非以原 fossil 倉儲內建 autosync 綁定的使用者進行提交推送時, 可以透過 fossil remote-url off 切斷內建倉儲與工作目錄綁定的內建用戶資料, 然後在提交後, 以手動執行 fossil push. 意即: \n fossil push\xa0 https://usesid@fossil_server_url \n \n 純 IPv6 環境下的 Fossil Server \n 針對只採用 IPv6 協定上網的電腦中啟動 Fossil Server, 使用者可以使用 ssh 協定執行 fossil clone. \n 例如: ipv6.only.server domain 所屬的伺服器, 其操作系統僅啟用 IPv6 協定上網, 建立 Fossil Server 的模式與 IPv4 上網的伺服器相同, 但是, fossil clone 的指令則可採用 ssh 協定下的絕對倉儲路徑或相對倉儲路徑擷取遠端的倉儲檔案: \n 以絕對倉儲路徑 fossil clone: \n 假設 IPv6 主機上的 target.fossil 倉儲檔案位於 /home/account/repository/target.fossil, 則使用者可以利用: \n fossil clone ssh://account@your_ipv6_only_server_url//home/account/repository/target.fossil cloned.fossil \n 將遠端的 target.fossil 複製到近端存為 cloned.fossil 檔案, 其中特別注意到絕對路徑在 server_url 後面必須有兩個斜線. \n 以相對倉儲路徑 fossil clone: \n 此時假設 Fossil Server 是以 /home/account 用戶啟動, 則使用者可以利用: \n fossil clone ssh://account@your_ipv6_only_server_url/repository/target.fossil cloned.fossil \n 將遠端的 target.fossil 複製到近端存為 cloned.fossil 檔案, 其中特別注意到, 相對路徑除了在 server_url 後只需一個斜線, 且是以 /home/account 目錄作為相對目錄的根目錄, 使用者必須加入 /repository/target.fossil, 才能正確擷取到倉儲檔案. \n 上述兩種 fossil clone 指令執行後, 系統會要求輸入與 account 用戶對應的 Fossil Server 密碼, 完成後就可以將遠端的倉儲檔複製到近端. \n 附帶說明: 截至 fossil 2.2 版, 以 ssh 協定可以 fossil clone 遠端純 IPv6 主機上的倉儲, 但是卻無法以 fossil autosync 或 fossil push 將近端的版本提交推送到遠端. 因此目前的 Fossil Server 仍建議採用 IPv4/IPv6 並存的方式建立. \n 至於 Fossil SCM 的網路連線會依照系統環境變數中 http_proxy\xa0 設定使用 Proxy Server, 若無 http_proxy 環境變數設定, 則會直接連線. \n 也可以在 fossil clone 指令之後加上 --proxy 140.130.17.7:3128 進行連線. (IPv6 環境必須確認是否也可行) \n 參考資料: \n http://www.fossil-scm.org/fossil/doc/trunk/www/quickstart.wiki \n https://www.mail-archive.com/fossil-users@lists.fossil-scm.org/msg12114.html \n https://fossil-users.fossil-scm.narkive.com/ywA3W2pc/ssh-implementation \n https://blog.gtwang.org/linux/linux-ssh-public-key-authentication/ \n", 'tags': '', 'url': 'Fossil 指令.html'}, {'title': 'DartLang', 'text': 'https://github.com/rodydavis/easy_google_maps \n https://medium.com/dartlang \n Dart 2 啟動 \n https://news.dartlang.org/2018/02/announcing-dart-2-optimized-for-client.html \xa0宣布後, Dart 第二版正式啟動, 目前現存的許多與 Dart 第一版有關的資料頓時失去作用.\xa0 \n 其中也包括: \n Dart for Absolute Beginners (2014) \n https://link.springer.com/book/10.1007/978-1-4302-6482-8 \n Dart2 與 Dart1 的差異請參考:\xa0 https://dart.dev/dart-2 \n \n 初學 Dart 的規劃 \n Dart 程式語言從 2011 年至  2017 年 Flutter 出現 之前, 在無法全面取代 Javascript 的情況下, 採取了利用 多平台 的方式進行推廣, 也就是目前以: \n 跨手機平台的 JIT + VM 執行開發, 將所完成的手機程式以 AOT + Runtime 進行部署. \n Web 部分以 dartdevc 執行開發, 並將所完成的 dart 程式以 dart2js 轉為 Javascript 後在瀏覽器中前台執行. \n 即便如此, 就 Web 開發部分, 除了歷史較久的  Dartangular  外, 目前也啟動了依附在  Flutter  的  Flutter for Web . \n 上述的 Dart 多平台開發模式, 假如再納入類似  Python Flask  的伺服器端開發框架:\xa0 https://aqueduct.io/ , 從初學者的角度來看, 可能很難入門, 因為手機平台開發需要有對 Android 與 iOS 等操作系統的基本概念, 而 Web 開發又牽涉到必須學習 HTML5 與 CSS. \n 因此在本課程採用 Dart 進行教學, 對初學者的規劃為: \n \n 從  Dart for Absolute Beginners (2014) \xa0中適用於 Dart 2 的基本語法開始, 直接在  https://mde.tw/dartpad \xa0中練習, 先了解 Dart 2 程式語言的用法之後, 再加上 Html5 中的 Canvas 繪圖, 配合 CSS 的編寫, 可以在\xa0 https://mde.tw/dartpad \xa0完成靜態與動態繪圖. \n 接下來則配合第一階段在\xa0 https://mde.tw/dartpad \xa0所編寫的 .dart, .html 以及 .css 等檔案, 以 dart2js -o main.js main.dart 指令, 將 .dart 轉為 .js 後, 結合 .html 與 .css 在單一網頁中執行靜態繪圖與動態繪圖程式. \n 第三階段則利用  Practical Flutter (2019) , 讓使用者登入 @gm 電子郵箱後, 下載\xa0 flutter_portable_final.7z , 放入 USB 隨身碟, 或者與先前下載的\xa0 2019Fall可攜套件.7z , 整合設定, 打造可以利用  Flutter  與  Bluestacks  進行手機 (以 Android 為主) 程式開發的環境. 並嘗試修改第一與第二階段所完成的程式, 直接在 Android 模擬器或實體手機上執行. \n \n \n 在第一階段中, 可以輔助學習的資料包括: \n https://dart.dev/guides/language/language-tour \n https://da-bootcamp.firebaseapp.com/?course=start_programming_dart \xa0 \n 將分別完成 \n \n Hello World! ,  Hello Dart!  (主函式, 註解, 資料列印與基本語法) \n 亂數分組 \xa0(變數, 資料型別, 資料 io, 數列, 迴圈, 模數運算, 判斷式) \n int2double \xa0(類別, 物件導向) \n ROC Flag \xa0(Html5 Canvas 靜態繪圖, CSS) \n Snake Game \xa0 (Html5 Canvas 動態態繪圖, CSS) \n Solar System \xa0 (Html5 Canvas 動態態繪圖, CSS) \n Rabbit Count \xa0(HTML 表單與滑鼠事件, CSS) \n Ping Pong Game \xa0(HTML5 Canvas 動態繪圖, 滑鼠事件, CSS) \n \n 第二階段, 將  https://mde.tw/dartpad \xa0中 Samples 範例利用 dart2js 轉為單一 html 程式, 送到各組員的 Github Pages 網站中執行. \n 第三階段, 透過  flutter_portable_final.7z , 中的 Flutter SDK 與 Visual Studio Code, 將 Samples 範例程式轉為 Android 程式, 在 Bluestacks 中執行. \n \n 進階延伸應用: \n 利用\xa0 https://aqueduct.io/ \xa0開發類似  CMSiMDE  的網際內容管理系統. \n 利用  Flutter  與  Flutter for Web  開發一套能夠在 Web 與手機中執行, 並用來操控  V-rep  與  Webots  虛擬環境中的機電系統. \n 利用  Flutter  與  Flutter for Web  開發一套能夠在 Web 與手機中執行的平面多連桿機構模擬分析套件. \n 利用  Flutter  與  Flutter for Web  開發一套能夠與\xa0 https://github.com/KmolYuan/Pyslvs-UI \xa0伺服器中運算核心整合的平面多連桿機構合成與分析套件. \n', 'tags': '', 'url': 'DartLang.html'}, {'title': 'Dart2 Spec', 'text': "DartLangSpecDraft_2.3.0_dev.pdf \n <> 表示其中包含項目為必選項 \n [] 表示其中包含項目為可選項 \n {} 表示其中包含項目為可重複 0 次至無限次數的選項 \n | 表示左右兩邊可以任選一項 \n ::= 表示可被定義為 \n 引號裡的項目代表其本身 \n ?: 表示操作符左邊的符號 (或括號中的一組符號) 是可選項 \n *: 表示可以重複零次或多次 \n +: 表示可以出現一次或多次 \n https://thosakwe.com/the-story-of-my-migration-to-dart-2/ \n 上述文章中說明 Dart2 最新規格中的\xa0Dart is a class-based, single-inheritance, pure object-oriented programming language. Dart is optionally typed and supports reified generics. \n reified generics 代表最新的 Dart2\xa0strongly-typed and sound, with reification of generics. 以下為範例: \n //var myIntegers = <int>[1, 2, 3];\nvar myIntegers = <dynamic>[1, 2, 3];\n\nvoid main(){\ndoIt(myIntegers);\n}\n\nvoid doIt(List<int> numbers) {\n    print('Hi');\n} \n 上列程式執行時會報錯, 因為 myIntegers 宣告時並非 int, 即便其內容為 int. \n 必須改為: \n var myIntegers = <int>[1, 2, 3];\n//var myIntegers = <dynamic>[1, 2, 3];\n\nvoid main(){\ndoIt(myIntegers);\n}\n\nvoid doIt(List<int> numbers) {\n    print('Hi');\n} \n \n", 'tags': '', 'url': 'Dart2 Spec.html'}, {'title': 'Reference', 'text': '\n 計算機程式能夠解決甚麼問題? \n 首先必須確立運用計算機程式的重要關鍵, 取決於領域知識 (Domain Knowledge) 範圍內所要解決的問題.\xa0 \n 學習計算機程式的目的, 在於透過與電腦的溝通, 然後逐一解決各專業領域中所碰到的問題. \n 因此, 在學習如何寫程式的過程, 必須經歷以下過程: \n 如何與電腦溝通? - 了解電腦如何運作, 網路如何連接, 程式系統如何搭建? \n 要解決甚麼問題? - 學習如何定義問題, 透過對問題的瞭解, 逐步尋求解決方法. \n 如何利用電腦程式解決這個問題? - 解決同一問題的方法不只一種, 所有解決方案都必須設法持續改進. \n Python: 一般運算與資料處理應用, 網際內容管理, GUI for 電腦輔助機械設計工程分析 \n ANSI C: 建立 Fossil SCM \n C++: Solvespace 與 Pyslvs 平面機構合成與分析內之幾何運算核心 \n Dart: 配合 Flutter SDK 開發手機應用程式 \n 手機程式作為介面 <-> Python Flask 作為 Server 端程式負責與其他 C/C++/Python 核心執行運算 \n 參考資料: \n https://en.wikipedia.org/wiki/Function_as_a_service \n https://en.wikipedia.org/wiki/Serverless_computing \n https://medium.com/yakka/dart-is-ready-for-faas-with-cloud-run-fb069abb3176 \n Concurrent Programming for Scalable Web Architectures.pdf \n', 'tags': '', 'url': 'Reference.html'}, {'title': 'Documentation', 'text': 'https://www.divio.com/blog/documentation/ \n', 'tags': '', 'url': 'Documentation.html'}, {'title': 'Python', 'text': 'Python Projects for Beginners (2020) \n https://link.springer.com/book/10.1007/978-1-4842-5355-7 \xa0 \n Hands-on Scikit-Learn for Machine Learning Applications (2020) \n https://link.springer.com/book/10.1007/978-1-4842-5373-1 \n https://medium.com/@jdatascientist/tuning-tuning-scikit-learn-parameters-using-optimization-21e7ea2787d9 \n python 3.7.2 tutorial.pdf \n Begineers Guide to Python 3 Programming.pdf \n The Python Workbook.pdf \n 亂數分組與 CMSiMDE \n https://github.com/mdecourse/cmsimde \n \n 課程評分程式 \n \'\'\'\n根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績\n\'\'\'\n\ndef diff(自評分數, 互評得分):\n    return abs(自評分數 - 互評得分)\n    \ndef max(自評分數, 互評得分):\n    if 自評分數 > 互評得分:\n        return 自評分數\n    else:\n        return 互評得分\n\ndef 分組比分(自評分數, 互評得分):\n    if diff(自評分數, 互評得分) < 5:\n        學員得分 = max(自評分數, 互評得分)\n    else:\n        學員得分 = 互評得分 - diff(自評分數, 互評得分)\n    return 學員得分\n    \ndef 全班比分(學員得分, 教師評分):\n    if diff(學員得分, 教師評分) < 5:\n        學員成績 = max(學員得分, 教師評分)\n    else:\n        學員成績 = 教師評分 - diff(學員得分, 教師評分)/4\n    return 學員成績\n\ndef 學員成績(自評分數, 互評得分, 教師評分):\n    學員分組得分 = 分組比分(自評分數, 互評得分)\n    學員課程成績 = 全班比分(學員分組得分, 教師評分)\n    return 學員課程成績\n    \nprint(學員成績(80, 70, 60))\nprint(學員成績(60, 70, 80)) \n \n Python 語法 \n Python 3 官方教材:  https://docs.python.org/3/index.html \n Python tutorial:  https://docs.python.org/3/tutorial/index.html  (英文) \n Python 教學:  https://python-doc-tw.github.io/tutorial/index.html \n 網頁上的 Python - Brython:  https://www.brython.info/static_doc/en/intro.html  (解譯式) \n 網頁上的 Python GUI- Flexx:  https://flexx.readthedocs.io/en/stable/  (轉譯式) \n \n \n \n  for ggame  \n \n \n \n \n \n  Cango 程式庫  \n \n \n \n  for Konva 程式庫  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n 開始練習 print() 用法, 並著手建立函式 \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n Filename:  .py   \n Run   Output   清除輸出區 清除繪圖區 Reload \n \n \n \n  ****************************** keyword start  \n \n \n  ****************************** keyword end  \n  ***************************** slide ex1 start  \n \n \n \n  ***************************** slide ex1 end  \n  ***************************** slide ex2 start  \n \n \n \n  ***************************** slide ex2 end  \n  ***************************** slide ex3 start  \n \n \n \n  ***************************** slide ex3 end  \n  ***************************** slide ex4 start  \n \n \n \n  ***************************** slide ex4 end  \n  line drawing start  \n \n \n \n  line drawing ends  \n \n  flag ex start  \n \n \n \n  flag ex ends  \n \n  bunny start  \n \n \n \n  bunny ends  \n \n  clear canvas start  \n \n \n \n  clear canvas ends  \n \n  cango spur gears start  \n \n \n \n  cango spur gears ends  \n \n  temp convert start  \n \n \n \n  temp convert ends  \n \n  forloop start  \n \n \n \n  forloop ends  \n \n  guess start  \n \n \n \n  guess ends  \n \n  autoguess start  \n \n \n \n  autoguess ends  \n \n  lottery start  \n \n \n \n  lottery ends  \n \n  台灣威力彩 start  \n \n \n \n  台灣威力彩 ends  \n \n  bezier starts  \n \n \n \n  bezier ends  \n \n  turtle1 starts  \n \n \n \n  turtle1 ends  \n \n  turtle2 starts  \n \n \n \n  turtle2 ends  \n \n  turtle3 starts  \n \n \n \n  turtle3 ends  \n \n  turtle4 starts  \n \n \n \n  turtle4 ends  \n \n  turtle5 starts  \n \n \n \n  turtle5 ends  \n \n  turtle6 starts  \n \n \n \n  turtle6 ends  \n \n  turtle7 starts  \n \n \n \n  turtle7 ends  \n \n  turtle8 starts  \n \n \n \n  turtle8 ends  \n \n  konva1 starts  \n \n \n \n  konva1 ends  \n \n  ycqsort starts  \n \n \n \n  ycqsort ends  \n \n  ball starts  \n \n \n \n  ball ends  \n Keyword Ex1 Ex2 Ex3 Ex4 Ex5 Guess Autoguess 大樂透 威力彩 Temp Draw Flag Bezier Turtle1 Turtle2 Turtle3 Turtle4 Turtle5 Turtle6 Turtle7 Turtle8 Konva1 Bunny Ball Spur Ycqsort Clear \n 參考資料: \n turtle_intro.pdf \n turtle_intro2.pdf \n 其他擷取程式的方式:  http://mde.tw/2017springvcp/blog/web-based-python.html \n Qt for Python \n https://www.qt.io/qt-for-python \n https://build-system.fman.io/python-qt-tutorial \n https://build-system.fman.io/pyqt-exe-creation/ \n https://github.com/mherrmann/fbs-tutorial \n https://www.ics.com/blog/we-ported-qt-app-c-python-heres-what-happened \n QML 與 Flutter \n https://paulhammant.com/2016/11/15/qmls-squandered-opportunity/ \xa0中所提到 QML 的弱點在於將 .qml 與 .c++ 或 .py\xa0 分開的問題, Google 總算在 Flutter 適度解決了此一瓶頸. \n 但是 QML 加上 Qt for Python 仍不失為一個好了 Desktop GUI 開發框架. \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Python.html'}, {'title': 'Javascript', 'text': 'Beginning JavaScript (2019) \n https://link.springer.com/book/10.1007/978-1-4842-4395-4 \n for (var i=0; i<10; i++)\n    // 將原本列在 console 區的資料導引到下列程式執行輸出區\n    console.log(i + ": Hello, 開始學習 Javascript!"); \n 下列範例,\xa0 以\xa0 https://www.arc.id.au/CanvasGraphics.html \xa0繪圖程式庫中的程式碼為例. \n \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n<script type="text/javascript" src="./../cmsimde/static/ace/mode-python3.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/snippets/python.js"></script>\n \n  嘗試直接使用 ace.js 編寫 Javascript  \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["js_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n Filename:  .js   \n Run Output 清除輸出區 清除繪圖區 清除 html 區 Reload \n \n ROC Flag Plot Sin Plot Cos Excavator Bouncing Ball Edit Curve Group Drag Involute Gear Gear Meshing Internal Gear Three.js Cube Canvas Draw Line \n \n \n \n', 'tags': '', 'url': 'Javascript.html'}, {'title': 'JS examples', 'text': 'https://github.com/xibyte/jsketcher \n https://emscripten.org/ \n Prompt 與運算 \n degreeC = prompt("請輸入攝氏溫度!");\nconsole.log("攝氏 " + degreeC + " = 華氏 " + \n(degreeC*9/5 +32) + " 度"); \n Open new window \n var window = window.open(\'https://mde.tw\', "mde",\n"menubar=no, titlebar=no, noopener, noreferer, personalbar=no, toolbar=no, location=no,resizable=no,scrollbars=no,status=no"); \n Canvas 繪圖 \n // 建立 flag canvas\ndocument.getElementById("html").innerHTML="<canvas id=\'flag\' width=\'600\' height=\'400\'></canvas>";\n// 在 canvas 畫布上建立 2d 的繪圖 context\ncanvas = document.getElementById("flag")\nvar ctx = canvas.getContext(\'2d\');\n// 設定繪圖寬與高\nvar flag_w = canvas.width;\nvar flag_h = canvas.height;\n// 設定白日的半徑\nvar circle_x = flag_w / 4;\nvar circle_y = flag_h / 4;\n\n// 先畫滿地紅\nctx.clearRect(0, 0, flag_w, flag_h);\nctx.fillStyle = \'rgb(255, 0, 0)\';\nctx.fillRect(0, 0, flag_w, flag_h);\n\n// 再畫青天\nctx.fillStyle = \'rgb(0, 0, 150)\';\nctx.fillRect(0, 0, flag_w / 2, flag_h / 2);\n\n// 畫十二道光芒白日\nctx.beginPath();\n    var star_radius = flag_w / 8;\n    var angle = 0;\n    var i;\nfor (i = 0; i < 25; i++) {\n    angle += 5 * Math.PI * 2 / 12;\n    //console.log(angle);\n    var toX = circle_x + Math.cos(angle) * star_radius;\n    //console.log(toX);\n    var toY = circle_y + Math.sin(angle) * star_radius;\n    //console.log(toY);\n    // 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo\n    if (i === 0){\n      ctx.moveTo(toX, toY);\n    }\n    else\n    {\n      ctx.lineTo(toX, toY);\n    }\n}\nctx.closePath();\n\n// 將填色設為白色\nctx.fillStyle = \'#fff\';\nctx.fill();\n\n// 白日:藍圈\nctx.beginPath();\n    ctx.arc(circle_x, circle_y, flag_w * 17 / 240, 0, Math.PI * 2, true);\n    ctx.closePath();\n    // 填色設為藍色\n    ctx.fillStyle = \'rgb(0, 0, 149)\';\n    ctx.fill();\n// 白日:白心\nctx.beginPath();\n    ctx.arc(circle_x, circle_y, flag_w / 16, 0, Math.PI * 2, true);\n    ctx.closePath();\n// 填色設為白色\nctx.fillStyle = \'#fff\';\nctx.fill();\n \n Clear Existing Canvas \n // 清除已經存在 flag 繪圖區域的 canvas\nvar ctx =document.getElementById("flag").getContext(\'2d\');\nctx.clearRect(0, 0, canvas.width, canvas.height); \n Mouse Position \n function writeMessage(canvas, message) {\n    var context = canvas.getContext(\'2d\');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.font = \'18pt Calibri\';\n    context.fillStyle = \'black\';\n    context.fillText(message, 10, 25);\n  }\n      \nfunction getMousePos(canvas, evt) {\n    var rect = canvas.getBoundingClientRect();\n    return {\n      x: evt.clientX - rect.left,\n      y: evt.clientY - rect.top\n    };\n  }\n  \nvar canvas = document.getElementById(\'canvas\');\nvar ctx = canvas.getContext(\'2d\');\n\ncanvas.addEventListener(\'mousemove\', function(evt) {\nvar mousePos = getMousePos(canvas, evt);\nvar message = \'Mouse position: \' + mousePos.x + \',\' + mousePos.y;\nwriteMessage(canvas, message);\ncreateLines();\n}, false);\n \n Ajax 與 Flask \n /* flask side\nfrom flask import Flask\nfrom flask_cors import CORS\napp = Flask(__name__)\nCORS(app, support_credentials=False)\n\nimport json\n\n@app.route(\'/hello/<name>\')\ndef hello_world(name=None):\n    str = {\'key\':\'Hello World!\', \'q\':name}\n    #out = {\'key\':str}\n    res = json.dumps(str)\n    return res\n\nif __name__ == \'__main__\':\n    app.run()\n*/\n\n// Javascript side\n$.ajax({\n    type:"GET",\n    dataType: "json",\n    data:\'Payam\',\n    url: "http://localhost:5000/hello/world",\n    success: function(data){\n        buf1=data;\n        console.log(data["key"]);\n        console.log(data["q"]);\n    }\n}) \n https://github.com/realpython/flask-single-page-app \n', 'tags': '', 'url': 'JS examples.html'}, {'title': 'node.js', 'text': 'N-API:\xa0 https://nodejs.org/api/n-api.html#n_api_n_api \n https://cnodejs.org/topic/5957626dacfce9295ba072e0 \n \n', 'tags': '', 'url': 'node.js.html'}, {'title': 'GCS', 'text': 'Geometric Constrain Solver \n https://github.com/tmpvar/2d-constraints-bfgs \n https://github.com/xibyte/jsketcher \n https://github.com/tab58/assemble2d \n \n \n', 'tags': '', 'url': 'GCS.html'}, {'title': 'Ebooks', 'text': '2014 年出版的 Dart for absolute begineers 電子書: \n https://link.springer.com/book/10.1007/978-1-4302-6482-8 \n 本書程式碼:\xa0 https://github.com/apress/dart-for-absolute-begs \n 導讀: \n 可以利用\xa0 https://translate.google.com.tw/?op=translate&sl=en&tl=zh-TW \xa0 \n 與\xa0 https://www.merriam-webster.com/dictionary/ \xa0協助理解 ebook 內容. \n 第一章可以完全跳過, 因為所包含的工具屬於 Dart1, 本課程所使用的為 2018 年 2 月所發布的 Dart2 標準. \n Appendix C: Dart Timeline \n 2017.05: Flutter 推出 Alpha 版 ( https://en.wikipedia.org/wiki/Flutter_(software) ) \n https://github.com/flutter/flutter \n 2018.08:  Dart2 推出穩定版本 \n https://github.com/dart-lang/sdk \n 為什麼該學 Dart? \xa0(除了 C, C++, Lua, Python 與 Javascript 之外) \n C 與 Lua: 擅長各式硬體控制 \n C++: 建立 CAD/E/M 運算核心 \n Python: Prototyping 後經由  Cython  轉為 C++ \n Javascript: Web programming (由 Dart 轉 js 嵌入網頁執行) \n Dart: Server, Web and Mobile programming (透過 Flutter SDK) \n C/C++ 核心 (含 Python+Cython) 作為設計分析與硬體控制核心, 以 Lua 及 Python 中繼進行組態調控, Web Server 以 Dart 開發, Web 與 Mobile Client 端則採 Dart 與 Flutter 執行開發. \n 第十八章: Interview with Dart\'s creator \n 第十五章: Tools of the Trade \n 學會使用 Git 與 Github 並且配合 CMSiMDE 建立個人 cp2019 倉儲與網站, 並且學會利用 https 與 ssh 從近端對遠端的 Github 連線更新倉儲內容. \n 第七章 How does the web work? \n 首先必須瞭解電腦輔助設計室的網路架構, IPv4 與 IPv6 環境下要如何設定 Windows 10 的網路連線, 如何設定 Chrome 與 Firefox 的 Proxy Servers, 系上提供的 Proxy Server 如何設定, 當使用 Git 在 https 與 ssh 連線時的 Proxy Serve r該如何設定. \n 之後再透過本書第七章中所介紹的 Internet, Web 以及 HTML 等內容, 設法在  https://dartpad.github.io \xa0\xa0中編寫帶有 Html 與 CSS 的網際程式. \n 更完整有關 Html5 與 CSS 的電子書:  The Essential Guide to HTML5 \n 第八章 Using Dart to interact with html. \n 第二章 Your First Dart Program \n Hello World 程式可以直接在  https://dartpad.github.io  上執行. 而網頁表單版的 Hello World 則可以將原本的網頁版程式, 拆成 dart, html 與 css 等三部分, 在 dartpad 上勾選 "show web content" 後執行, 若要直接在瀏覽器中執行, 則必須利用位於 y:\\dart-sdk/bin/dart2js.bat 或 y:\\flutter\\bin\\cache\\dart-sdk\\bin\\dart2js.bat 將 helloworldfancy.dart 以: \n dart2js -o helloworldfancy.js helloworldfancy.dart \n 轉為 helloworldfancy.js 後以 <script> 標註導入 html 檔案中執行. \n helloworldfancy.dart on Dartpad \n 練習題目: \n 將 helloworldfancy.dart 轉為 .js 後, 直接在瀏覽器中執行. \n helloworldfancy.dart 轉為 .js 之後, 能否嵌入 CMSiMDE 的頁面中? \n 第三章:\xa0Some Programming Fundamentals \n var, String, List, num 等為變數的型別 (type) 宣告, 特別注意 Sting 與 List 以大寫字母開頭. \n 第九章: Hangman \n 第十章: OOP Fundamentals \n 因為目前  https://dartpad.github.io  不支援多 dart 程式模式, 因此所有的 dart 程式碼都必須寫在同一個檔案中. \n Object-oriented programming is a method of representing programmatic ideas that allows for improved abstraction, increased productivity, and better code reuse. Dart is a fully object-oriented programming language, in that it has no concept of primitive data types (primitive meaning "non-object"). In Dart, everything is an object. \n An object is an abstraction meant to represent a component of a program. Objects can be created, destroyed, given attributes, and made to perform actions. The metaphors that they can represent are really limited only by your imagination. Objects have instance variables, which represent their attributes, and methods, which represent the actions they can perform. \n Every object belongs to a class. The class of an object is its type. In other words, objects of the same class are the same type. Objects of the same class have the\xa0 same instance variables and methods available to them (although the value of those instance variables may differ). \n In Dart, stylistically, class names are written in CamelCase, like variable and function names. Unlike variable and function names, the first letter of a class name should be capitalized. Instance variable names and method names should also be camelCase, but begin with a lowercase letter. \n 第十一章: Object-Oriented Design \n 第十二章: Advanced Dart Concepts \n 第十三章: Testing Your Works \n 第十四章: Concurrency \n 第十六章: Puting it all together \n 第十七章: Where to go from here \n Appendix A: Dart Cheat Sheet \n Dart2 Cheat Sheet.pdf \n Appendix B: History of Web Programming \n', 'tags': '', 'url': 'Ebooks.html'}, {'title': 'Practical Flutter', 'text': 'Practical Flutter (2019) \n https://link.springer.com/book/10.1007/978-1-4842-4972-7 \n Source Codes: \n https://github.com/Apress/practical-flutter \n Chapter 1: Flutter: A gentle introduction \n Flutter 以代號 "Sky" 首次出現在 2015 年的 Dart 開發者年會. 但直到 2018.12.04 Flutter 1.0 才推出穩定版本. 至 2019.11.10 Flutter 推出\xa01.12.10 版, 而 Dart (2011 年在丹麥 Google 啟動, 2013.11 推出 1.0 版) 則推出\xa02.7.0 版. \n Flutter 倉儲:\xa0 https://github.com/flutter/flutter \n Dart 相關倉儲:\xa0 https://github.com/dart-lang \n Flutter offers two sets of widgets: Material design widgets and Cupertino design widgets. The former implement Google\'s own Material design language, which is the default design language for Android. The latter implements Apple\'s iOS design language. \n 2019 年 Dart 終於受到程式開發者關注的目光:\xa0 https://jaxenter.com/poll-results-dart-word-2019-154779.html \n Dart can use ahead-of-time compilation to native code in order to reach the highest levels of performance this side of Assembly. It compiles to ARM and x86 code, but it can also transpile to JavaScript so your Dart code can run, after a fashion, on the web even. Putting aside that transpilation, with Flutter targetting a mobile platform, you’ll wind up with AOT compiled Dart code. \n Dart language specification:\xa0 https://dart.dev/guides/language/spec \n https://dart.dev/guides/language/specifications/DartLangSpec-v2.2.pdf \xa0與 Dart 1.0 並不相容. 相關差異:\xa0 https://dart.dev/dart-2 \n Dart2 型別系統:\xa0 https://dart.dev/guides/language/sound-dart \n The Dart language is type safe: it uses a combination of static type checking and runtime checks to ensure that a variable’s value always matches the variable\'s static type. Although types are mandatory, type annotations are optional because of type inference. \n Layout Widgets:\xa0 https://flutter.dev/docs/development/ui/widgets/layout \n StatelessWidget: \n A widget that extends StatelessWidget never changes and is called a stateless widget because it has no state. \n StatefulWidget \n the StatefulWidget base class has the notion of state in it, that is, it changes in some way when the user interacts with it. \n When you code a StatefulWidget, you actually have to create two classes: the stateful widget class itself, and a state class to go along with it. \n \n StatefulWidget 範例: \n 放大   回復 \n \n The core difference between a stateful and a stateless widget though is that a stateless widget doesn\'t automatically get re-rendered by the Flutter core framework when its "state" changes, whereas a stateful widget does. When the state of a stateful widget changes, regardless of what causes the change, certain lifecycle events fire.\xa0 \n Those trigger lifecycle event hook functions getting called, which results, ultimately, in Flutter rerendering the portion of the screen where the widget resides (assuming a change was necessary – Flutter makes that determination for you because it knows what the state of the widget was before as well as after the event). \n Every Flutter app\'s main entry point is a main() method.\xa0 That method will be just a call to the runApp() method, provided by Flutter itself, and passing it the top-level widget. \n', 'tags': '', 'url': 'Practical Flutter.html'}, {'title': 'Quick Dart', 'text': 'Quick Start Guide to Dart Programming \n https://link.springer.com/book/10.1007/978-1-4842-5562-9 \n Ch1.\xa0Getting Started with Dart \n Ch2.\xa0Flow Control and Looping \n Ch3.\xa0Functions and Objects\xa0 \n Ch4.\xa0Inheritance and Mixins in\xa0Dart \n Ch5.\xa0Entity Relationships: Abstract Classes, Interfaces, and Exception Handling \n Ch6.\xa0Anonymous Functions \n Ch7.\xa0Data Structures and Collections \n Ch8.\xa0Multithreaded Programming Using Future and Callable Classes \n Ch9.\xa0Dart Packages and Libraries', 'tags': '', 'url': 'Quick Dart.html'}, {'title': 'Flutter', 'text': 'Flutter完整开发实战详解系列.pdf \n https://github.com/apgapg/flutter_physics_concepts \n https://rodolfohernan20.blogspot.com/2019/12/upload-files-to-server-with-flutter-web.html \n https://github.com/tekartik/sqflite \n https://stackoverflow.com/questions/54223929/how-to-do-a-database-query-with-sqflite-in-flutter \n https://github.com/rxlabz/algrafx \n https://github.com/KarimEbrahemAbdelaziz/drawapp \n https://github.com/KalleHallden/StudenServicesApp \n https://pub.dev/packages/github \n https://github.com/flutter/flutter_markdown \n https://github.com/Baseflow/flutter-geolocator \n https://github.com/apptreesoftware/flutter_barcode_reader \n https://github.com/tekartik/sqflite \n https://github.com/matteocrippa/flutter-nfc-reader \n https://github.com/CarGuo/gsy_github_app_flutter \n https://github.com/WinkMeter/flutter_socket_io \n https://paulhammant.com/2018/08/18/flutter-and-ui-automation/ \n 根據\xa0 https://stackoverflow.com/questions/49609889/flutter-doctor-doesnt-work-on-neither-command-prompt-or-powershell-window \n 在 Windows 10 環境時需要納入 c:\\windows\\system32 指令路徑搜尋. 而 flutter upgrade 時需要 powershell, 因此可攜程式啟動時, 可以將 Windows 10 的 %path% 放入 start.bat 中 path 設定順序最後一個搜尋路徑. \n https://flutter.dev/docs \xa0 \n https://medium.com/dartlang/announcing-dart-2-5-super-charged-development-328822024970 \n https://medium.com/@adityadroid/60-days-of-flutter-creating-the-app-ea0407b472ae \n https://github.com/flutterkit/zerker \n https://www.reddit.com/r/FlutterDev/ \n https://github.com/flutter/flutter/projects \n https://github.com/flutter/samples \n https://github.com/apptreesoftware/flutter_map \n https://pub.dev/packages/p5 \n https://github.com/duytq94/flutter-chat-demo \n https://github.com/srplab/starcore_for_flutter \n https://blog.geekyants.com/building-a-2d-game-in-flutter-a-comprehensive-guide-913f647846bc \n https://github.com/mdecourse/flutter-galaxy-game \n https://flutterchina.club/docs/ \n Flutter 實戰:\xa0 https://book.flutterchina.club/ \xa0( Github ) \n Flutter 與 Web 架構: \n https://medium.com/flutter/hummingbird-building-flutter-for-the-web-e687c2a023a8 \n Flutter 升級: \n flutter upgrade \n Flutter 移除 analytics: \n flutter config --no-analytics \n Flutter Tutorial: \n https://flutter.dev/docs/reference/tutorials \n https://github.com/FilledStacks/flutter-tutorials \n https://github.com/CarGuo/GSYGithubAppFlutter \n https://github.com/trending/dart \n Rendering: \n https://api.flutter.dev/flutter/rendering/CustomPainter-class.html \n \n Signature Pad: \n https://pub.dev/packages/signature_pad \n 第一步: \n 在校園網路或以 VPN 或設定代理主機, 下載  2019 Pratical Flutter 電子書 . \n 登入 @gm 電子郵箱後, 下載可放入 USB 隨身碟運作的可攜系統: \n \xa0 flutter_portable_final.7z \n 第二步: \n 解開 flutter_portable_final.7z, 並在執行手機程式開發的 Windows 10 64 位元電腦上安裝\xa0 https://www.bluestacks.com \xa0(也可以安裝 ref 目錄中的 Bluestacks 4.0 舊版本) \n 之後, 我們可以直接啟動\xa0 Flutter 隨身系統後, 利用電腦上的 Bluestacks 執行手機程式. \n 第三步: \n 啟動 Flutter 可攜系統後, 可以直接在命令列中輸入 code, 啟動 Visual Studio Code 程式編輯系統. \n 第四步: \n 執行第二步在操作系統中所安裝的 Bluestacks, 開啟後, 在命令列中以 adb connect localhost:5555, 以便之後將 Visual Studio Code 中的 Flutter 程式結果呈現在 Bluestacks 虛擬手機畫面中. \n 由於 Bluestacks 採用與 Virualbox 相同的虛擬主機模式, 適合在 CPU 等級較低的電腦上執行開發, 也可以在 Visual Studio Code 中按下 Ctrl + Shift + P, 然後輸入 flutter, 除了可以新建 Flutter 專案外, 也可以透過 Android Virtual Devices 指令, 建立 emulator, 並將編譯完成的手機程式結果, 呈現在對應的 emulator 中. \n 當然, 若使用者已經安裝並設置 https://developer.android.com/studio/run/win-usb , 也可以直接利用 USB 連接實體 Android 手機進行程式開發測試. \n 參考資料 \n https://flutterbyexample.com/ \n https://proandroiddev.com/mythbuster-10-rumors-about-flutter-why-its-not-worse-than-android-kotlin-f1a1acbe587d \n 專案範例 \n https://github.com/alibaba/flutter-go \n https://medium.com/flutter-community/flutter-firebase-realtime-database-crud-operations-using-provider-c242a01f6a10 \n https://github.com/flutter-ui-challenges/flutter_web_challenge_googlemaps \n https://medium.com/flutter-community/writing-a-flutter-data-entry-form-app-for-a-rental-agency-e5a7dab20596 \n https://medium.com/flutter-community/using-svg-in-flutter-3dcf7b1dd713 \n https://medium.com/analytics-vidhya/deploy-ml-models-using-flask-as-rest-api-and-access-via-flutter-app-7ce63d5c1f3b \n https://github.com/wiltonribeiro/grocery_shop_flutter \n \n \n pubspec.yaml 中的支援版次表示法: \n https://stackoverflow.com/questions/53563079/what-is-the-caret-sign-before-the-dependency-version-number-in-flutters-pub \n 參考資料: \n https://github.com/flutter-devs/flutter_camera_demo \n https://github.com/nirav4273/flutter_hair_saloon', 'tags': '', 'url': 'Flutter.html'}, {'title': 'Flutter Mobile', 'text': 'Practical Flutter (2019) \n https://link.springer.com/book/10.1007/978-1-4842-4972-7 \n Chapter 7: Flutter Chat 希望以 Flask + SocketIo 取代 Node.js \n https://github.com/mnlightstone/Chatroom-Flask-Socketio \n https://codeburst.io/building-your-first-chat-application-using-flask-in-7-minutes-f98de4adfa5d \xa0( Source codes ) \n 需要透過 python -m pip install flask_socketio 安裝模組. 而且 socketio.js 必須使用 2.0 以上版本, 才能以 UTF-8 編碼: \n https://cdnjs.com/libraries/socket.io/2.2.0 \n 例如使用:\xa0 \n https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js \xa0 \n 以\xa0 https://github.com/Samhita-alla/flask-chat-app-article \xa0為例: \n 所需 Python 模組包含: \n Flask==0.12.2 flask-socketio eventlet==0.17.4 gunicorn==18.0.0 \n 其 main.py: \n from flask import Flask, render_template\nfrom flask_socketio import SocketIO\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'vnkdjnfjknfl1232#\'\nsocketio = SocketIO(app)\n\n\n@app.route(\'/\')\ndef sessions():\n    return render_template(\'session.html\')\n\n\ndef messageReceived(methods=[\'GET\', \'POST\']):\n    print(\'message was received!!!\')\n\n\n@socketio.on(\'my event\')\ndef handle_my_custom_event(json, methods=[\'GET\', \'POST\']):\n    print(\'received my event: \' + str(json))\n    socketio.emit(\'my response\', json, callback=messageReceived)\n\n\nif __name__ == \'__main__\':\n    socketio.run(app, debug=True)\n \n 位於 templates 目錄中的 session.html \n   <!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <title>Flask_Chat_App</title>\n  </head>\n  <body>\n\n    <h3 style=\'color: #ccc;font-size: 30px;\'>No message yet..</h3>\n    <div class="message_holder"></div>\n\n    <form action="" method="POST">\n      <input type="text" class="username" placeholder="User Name"/>\n      <input type="text" class="message" placeholder="Messages"/>\n      <input type="submit"/>\n    </form>\n\n    <!-- jQuery (necessary for Bootstrap\'s JavaScript plugins) -->\n    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>\n    <script type="text/javascript">\n      var socket = io.connect(\'http://\' + document.domain + \':\' + location.port);\n\n      socket.on( \'connect\', function() {\n        socket.emit( \'my event\', {\n          data: \'User Connected\'\n        } )\n        var form = $( \'form\' ).on( \'submit\', function( e ) {\n          e.preventDefault()\n          let user_name = $( \'input.username\' ).val()\n          let user_input = $( \'input.message\' ).val()\n          socket.emit( \'my event\', {\n            user_name : user_name,\n            message : user_input\n          } )\n          $( \'input.message\' ).val( \'\' ).focus()\n        } )\n      } )\n      socket.on( \'my response\', function( msg ) {\n        console.log( msg )\n        if( typeof msg.user_name !== \'undefined\' ) {\n          $( \'h3\' ).remove()\n          $( \'div.message_holder\' ).append( \'<div><b style="color: #000">\'+msg.user_name+\'</b> \'+msg.message+\'</div>\' )\n        }\n      })\n    </script>\n\n  </body>\n  </html> \n 此外, 若 Server 端也要使用 Dart, 可以試著利用\xa0 https://aqueduct.io/ \xa0與 Socketio.js 製作. \n 參考: \n https://github.com/stablekernel/aqueduct_examples \n https://aqueduct.io/docs/http/websockets/ \n https://medium.com/dartlang/building-a-chat-app-in-dart-815fcd0e5a31 \n https://codeburst.io/build-a-chat-application-in-dart-2-part-1-567eacdcf0c8 \n https://codeburst.io/build-a-chat-application-in-dart-part-2-d43a4d450487 \n', 'tags': '', 'url': 'Flutter Mobile.html'}, {'title': 'Flutter Web', 'text': 'September 10, 2019 之後, Flutter Web 已經與主 Flutter 程式庫整合. 必須透過\xa0 https://flutter.dev/docs/get-started/web \xa0說明, 將 Flutter 程式轉為在瀏覽器中執行的格式: \n 查詢 flutter 所在 channel: \n flutter channel \n 基本流程為: \n \n 將 flutter channel 切換為 dev 分支 - flutter channel dev \n 更新 flutter sdk - flutter upgrade \n 啟動 web 環境 - flutter config --enable-web \n 在目前所在目錄建立 flutter 專案 (將在 lib 建立 demo 程式), 並提供內建的\xa0pubspec.yaml , 執行 flutter create . \n 將所要建立的 flutter 程式寫入 lib 目錄中, 並視實際需求修改 pubspec.yaml 檔案 \n 在 chrome 瀏覽器中執行 -\xa0 flutter run -d chrome \n 在 build/web 目錄建立網際 flutter 程式所需檔案 - flutter build web \n \n 根據上述流程, 將  https://github.com/mdecourse/cp2019/blob/master/downloads/dart_ex/flutter_mine4/flutter_mine4.dart \xa0轉為網際程式結果如下: \n \n 以 code 指令啟動隨身系統中的 Visual Studio Code, 然後以 Ctrl + Shift + P 帶出 Flutter: New Web Project, 點選後建立新的 Flutter Web 專案. \n Flutter Web 範例: \n https://github.com/mdecourse/vision_challenge \xa0(將每次改版 build 的內容複製到 Github Pages 對應的 docs 目錄中) \n http://mde.tw/vision_challenge \xa0 \n 參考資料 \n https://medium.com/flutter-community/flutter-create-and-deploy-a-website-from-scratch-4a026ebd6c \n', 'tags': '', 'url': 'Flutter Web.html'}, {'title': 'Dart', 'text': 'https://github.com/dart-lang/markdown \n https://medium.com/hackernoon/10-good-reasons-why-you-should-learn-dart-4b257708a332 \n https://www.theregister.co.uk/2019/11/08/google_dart_build/ \n Google software engineers have delivered  Dart 2.6 , an update to the open source programming language that provides the ability to create self-contained, native executables for the major desktop operating systems. \n That capability comes from an extension to the Dart compiler set called dart2native, which makes it possible to turn Dart files into self-contained executables holding ahead-of-time (AOT) compiled machine code. In other words, these executables will run on machines that don\'t have the Dart SDK installed. \n "With dart2native, you can create tools for the command line on macOS, Windows, or Linux using Dart," said Michael Thomsen, a Google product manager, in a  blog post . \n Dart and Python flask: \n https://medium.com/analytics-vidhya/deploy-ml-models-using-flask-as-rest-api-and-access-via-flutter-app-7ce63d5c1f3b \n https://github.com/SHARONZACHARIA/Deploy-ML-model \n https://github.com/klokantech/flask-backend \n Dart Language \n https://dart.dev/guides/language/language-tour \n https://renato.athaydes.com/posts/interesting-dart-features.html \xa0( pdf ) \n https://www.raywenderlich.com/4482551-dart-basics \n https://github.com/smartherd/DartTutorial \n http://jpryan.me/dartbyexample/ \xa0( Github ) \n https://github.com/rikulo/dquery \n https://pub.dev/packages/math_expressions \n blog generator in dart:\xa0 https://github.com/johnpryan/tavern \n https://github.com/yissachar/awesome-dart \n https://medium.com/flutter-community/deconstructing-dart-constructors-e3b553f583ef \n Dart2-Cheatsheet.pdf \n Dart2 Overview \n Dart2 Language Basics \n https://medium.com/learn-dart/how-i-learn-dart-and-flutter-ee8948cf58a5 \n https://www.youtube.com/channel/UCrTnsT4OYZ53l0QGKqLeD5Q \n Tutorial\xa0 \n http://thetechnocafe.com/just-enough-dart-for-flutter-tutorial-01-variables-types-and-functions/ \n http://thetechnocafe.com/just-enough-dart-for-flutter-tutorial-02-control-flow-and-exception-handling/ \n http://thetechnocafe.com/just-enough-dart-for-flutter-tutorial-03-classes-and-generics/ \n http://thetechnocafe.com/just-enough-dart-for-flutter-tutorial-04-asynchronous-and-libraries/ \n https://medium.com/@lihsinplayer/dart%E5%85%A5%E9%96%80-3eb57099da48 \n Math and Vector \n https://pub.dev/packages/vector_math \n https://pub.dev/packages/extended_math \n 利用 Dartpad 將\xa0 https://codepen.io/ggetchell/pen/KVgrYq \xa0改寫為 Dart based. \n Web \n https://github.com/BoldInventions/dart-webgl-tutorials \n https://api.dartlang.org/stable/2.5.0/dart-web_gl/dart-web_gl-library.html \n https://codingwithjoe.com/dart-fundamentals-async-await/ \n https://dart.dev/codelabs/async-await \n 2D\xa0Graphics \n https://github.com/bp74/StageXL \n https://pub.dev/packages/bezier \n AI and Machine Learning \n https://medium.com/dartlang/announcing-dart-2-5-super-charged-development-328822024970 \n https://towardsdatascience.com/cross-platform-on-device-ml-inference-a55b67e306b3 \n https://github.com/thosakwe/tensorflow.dart \n https://github.com/gyrdym/ml_algo \n https://github.com/YevhenKap/ai \n https://www.reddit.com/r/dartlang/ \n "Dart 2 was a huge upgrade to the Dart platform. It completed the transformation from our early web roots to a mainstream programming language suitable for fast development of rich user experiences across mobile and web. Dart is somewhat unique as a language in offering both a virtual machine (VM) and compilation to both native machine code and JavaScript. This supports the differing needs of the various platforms, for both development and production." \n --  Landing Dart 2 \n \n \n Beginning Programming with Dart.pdf \n https://dart.dev/guides/language \n https://dart.dev/tools/sdk/archive \n https://github.com/dart-lang/sdk \n https://pub.dev/packages/stagehand \n Dart News and Update: \n https://news.dartlang.org/ \n Dart Packages \n https://pub.dev/ \n Dart Mixins \n https://medium.com/flutter-community/dart-what-are-mixins-3a72344011f3 \n 安裝 Dart SDK \n https://dart.dev/get-dart \n https://storage.googleapis.com/dart-archive/channels/stable/release/2.4.1/sdk/dartsdk-windows-x64-release.zip \n Effective Dart \n https://dart.dev/guides/language/effective-dart \n async and await \n https://dart.dev/codelabs/async-await \n Dart FFI \n https://github.com/dart-lang/sdk/blob/master/samples/ffi/sqlite/docs/sqlite-tutorial.md \n https://github.com/mjohnsullivan/ffi \n Dart Pad \n embeded gist:\xa0 https://gist.github.com/scrum-1/d83c705a831668f76d2a39b97c5cb1c9 \n https://dartpad.dev/embed-html.html?id=d83c705a831668f76d2a39b97c5cb1c9 \n https://webdev-angular3-dartlang-org.firebaseapp.com/tutorials/get-data/fetch-data \xa0 \n Hello Dart \n https://dartpad.dartlang.org/embed-inline.html?id=1a980b16e56b1d1781720bf7d1ffc691 \n void main() {\n  print("Hello, World!");\n} \n 另一個 Dart 範例 \n import "dart:math" as math;\n\nclass Point {\n  // final 型別表示此變數只能設對應值一次, 即便在 runtime 期\n  // num 型別表示此變數可以是 int 或 float 數值\n  final num x, y;\n  Point(this.x, this.y);\n  Point.origin()\n      : x = 0,\n        y = 0;\n  num distanceTo(Point other) {\n    var dx = x - other.x;\n    var dy = y - other.y;\n    return math.sqrt(dx * dx + dy * dy);\n  }\n\n  Point operator +(Point other) => Point(x + other.x, y + other.y);\n}\n\nvoid main() {\n  var p1 = Point(10, 10);\n  var p2 = Point.origin();\n  var distance = p1.distanceTo(p2);\n  print(distance);\n}\n \n Dart Nullable Operator \n // assign y to x, unless y is null, \n// otherwise assign z\nx = y ?? z;\n\n// assign y to x if x is null\nx ??= y\n\n// call foo() only if x is not null\nx?.foo(); \n \n Dart 程式語言 \n 資料來源: \n https://dart.dev/guides/language/language-tour \n https://da-bootcamp.firebaseapp.com/?course=start_programming_dart \xa0 \n 每一個 Dart 程式都以小寫英文字母的 main() 主函式開始執行, 計算機程式語法中的函式與數學中的函式相同, 可以從 () 小括號中間接受輸入, 也可以產生輸出, 小括號中間空白, 表示這個函式沒有輸入的設計, 而 main 之前的 void 表示目前的函式也沒有輸出的設計. \n Dart 程式的執行範圍區隔與 C/C++ 等程式語法相同, 利用大括號 {} 來界定該函式的有效範圍 (註: Python 程式語法則是採用縮排, 以每四個空白鍵為單位, 每一個縮排範圍內的程式碼界定為同一區). \n 在這個 Dart 程式中, void 是關鍵字, 而 main() 是主函式, 也是每一個 Dart 程式會首先執行的函示, 而 print() 是用來列印資料的核心函式 (core function), 在 print() 中作為輸入的 "Hello, World" 以雙引號界定的資料稱為字串 (string), 字串也可以用單引號界定. \n main 與 print 並不屬於關鍵字, 可以當作變數名稱, 但並不建議使用. \n 關鍵字在程式語言的語法中稱為保留字, 具有特殊的用法與意義, 當使用者要命名變數時, 不可以使用該程式語言中所規定的關鍵字. \n 而 Dart 程式語法中的關鍵字共有以下 60 個: \n Keywords \n The following table lists the words that the Dart language treats specially. \n \n \n \n abstract \xa0 2 \n dynamic \xa0 2 \n implements \xa0 2 \n show \xa0 1 \n \n \n as \xa0 2 \n else \n import \xa0 2 \n static \xa0 2 \n \n \n assert \n enum \n in \n super \n \n \n async \xa0 1 \n export \xa0 2 \n interface \xa0 2 \n switch \n \n \n await \xa0 3 \n extends \n is \n sync \xa0 1 \n \n \n break \n external \xa0 2 \n library \xa0 2 \n this \n \n \n case \n factory \xa0 2 \n mixin \xa0 2 \n throw \n \n \n catch \n false \n new \n true \n \n \n class \n final \n null \n try \n \n \n const \n finally \n on \xa0 1 \n typedef \xa0 2 \n \n \n continue \n for \n operator \xa0 2 \n var \n \n \n covariant \xa0 2 \n Function \xa0 2 \n part \xa0 2 \n void \n \n \n default \n get \xa0 2 \n rethrow \n while \n \n \n deferred \xa0 2 \n hide \xa0 1 \n return \n with \n \n \n do \n if \n set \xa0 2 \n yield \xa0 3 \n \n \n \n Avoid using these words as identifiers. However, if necessary, the keywords marked with superscripts can be identifiers: \n \n \n Words with the superscript \xa0 1 \xa0 are \xa0 contextual keywords , which have meaning only in specific places. They’re valid identifiers everywhere. \n \n \n Words with the superscript \xa0 2 \xa0 are \xa0 built-in identifiers . To simplify the task of porting JavaScript code to Dart, these keywords are valid identifiers in most places, but they can’t be used as class or type names, or as import prefixes. \n \n \n Words with the superscript \xa0 3 \xa0 are newer, limited reserved words related to the \xa0 asynchrony support \xa0 that was added after Dart’s 1.0 release. You can’t use \xa0 await \xa0 or \xa0 yield \xa0 as an identifier in any function body marked with \xa0 async , \xa0 async* , or \xa0 sync* . \n \n \n All other words in the table are \xa0 reserved words , which can’t be identifiers. \n 上述 Dart 程式段中的符號 ";" 表示該行至分號的位置為一個完整可執行段程式 (use a semicolon to tell the interpreter where your statement ends.), 這一點也與 C/C++ 程式語法相同,\xa0 (Python 程式則一般利用跳行來界定可執行段, 但也可以利用 ";" 來界定). \n 程式註解 \n Dart 程式語法支援三種註解方式: \n \xa0 \xa0 // 這是一般的單行註解 \n \xa0 \xa0 /* 這是多行註解開始 \n \xa0 \xa0 \xa0 \xa0 可以橫跨多行說明文字, 程式在執行時會忽略其中內容 \n \xa0 \xa0 這是多行註解結束 */\xa0 \n 而第三種註解則用於產生程式的說明文件檔案: \n \xa0 \xa0 /// 這是單行的特殊的文件說明註解 \n \xa0 \xa0 /** 這是多行的文件說明註解開始 \n \xa0 \xa0 \xa0 \xa0 可以橫跨多行說明文字, 程式在執行時會忽略其中內容 \n \xa0 \xa0 這是多行的文件註解結束 */\xa0 \n 變數 (Variables) \n 了解 Dart 程式的基本用法, 也知道那些英文字是被設計作為保留關鍵字後, 接下來就需要了解有關程式中有關變數的命名. \n Variables are a basic building block of most modern programs. In short, a variable is an alias for a computer memory location, at which something of interest will be stored. \n Whatever is stored there is said to be the variable\'s value. If you\'ve studied the basics of algebra, you might remember variables mostly as single-letter stand-ins for numbers that helped you conceptualize and solve complex equations. Dart\'s variables are similar but not exactly the same, as they\'re capable of standing in for all kinds of values: numbers, strings of characters, or even more complex structures representing people, economic transactions, or geographic locations. \n All declared variables in Dart are initially given the special value of null. \n Unlike in algebra class, the = operator in Dart does not strictly represent equivalence. It\'s known as the assignment operator, so x = 5 is an expression instructing the computer to assign the value 5 to a memory location named x.\xa0 \n \n \n \n \n 型別 (Types) \n 推斷型別 (Inferred Types) \n Variables in Dart come in many different types. Some variables are meant to hold numbers, some characters, and some point to more complex values. When declaring variables, you can allow Dart to attempt to infer your variable\'s intended type or you can be explicit. \n In the last lesson, you declared your variables using the var keyword (short for "variable"), like this: \n \xa0 \xa0 var x; \n When you declare a variable using var, Dart tries to infer the variable\'s type. If you don\'t initialize the new variable with a value in the same statement as the declaration, Dart has nothing on which to base an inference, so the variable is considered to be of type dynamic. As a dynamic variable, x is able to accept values of any valid type. \n Mixing it Up \n In this example, the type of the variable called x is declared but not initialized with a value, and becomes dynamic, so code like this wouldn\'t be a problem: \n \xa0 \xa0 var x; \xa0 \xa0 x = 5; \xa0 \xa0 x = "Dart is great."; \n The code declares x, then instructs Dart to store a value of 5 at the memory location aliased as x. That value is an integer, a whole number with no fractional part. The next line assigns the value "Dart is great.", a string of characters, to x. That\'s a versatile variable. \n Disappearing Number Trick \n Try out this code: \n \xa0 \xa0 void main() { \xa0 \xa0 \xa0 \xa0 var x; \xa0 \xa0 \xa0 \xa0 x = 5; \xa0 \xa0 \xa0 \xa0 x = "Dart is great."; \xa0 \xa0 \xa0 \xa0 print(x); \xa0 \xa0 } \n Can you predict what will be printed? If you run the code, you\'ll see that "Dart is great." appears in the console. What happened to the 5? After x was declared, it was assigned the value 5, but the next instruction assigned a string of characters to x, obliterating the numeric value. Since x is of type dynamic, the code analyzer does not flag the potential issue. \n You Can\'t Do That \n Modify the code to look like this: \n \xa0 \xa0 void main() { \xa0 \xa0 var x = 5; \xa0 \xa0 x = "Dart is great."; \xa0 \xa0 print(x); \xa0 \xa0 } \n This code causes DartPad to display an error, saying that you\'re mixing types. Because you\'ve initialized x with an integer number value at the same time you declared it, Dart infers that x is supposed to hold integers from that point on. Now x is of type int. \n You can override Dart\'s inference by specifying that you want your variable to be dynamic. Try changing the declaration to look like this and see the error disappear: \n \xa0 \xa0 dynamic x = 5; \n Or you could explicitly declare and initialize x as an int, which is probably the best option under most circumstances: \n \xa0 \xa0 int x = 5; \n Using the int keyword, you\'ve created a variable meant to hold integers, so if you later try to assign a string of characters to it (a String type), Dart complains. The error is back. The analyzer is just trying to keep you from shooting yourself in the foot. \n Errors Stop Execution \n Note that if you run the code with mismatched types, execution will fail. You should always eliminate all reported errors before attempting to run your code. \n Why Use Explicit Types? \n Dart was perfectly happy to let you assign any value to your variable without errors when you declared x to be of type dynamic, so why would you restrict yourself with more specific types? The language has a sound type system that\'s designed to help you find problems before running your code. If you intend to use x to hold integer values, like grid coordinates maybe, then it\'s probably a mistake to assign it a string of characters. If you use explicit type annotations, Dart can help you catch these kinds of problems before they become run-time errors—bugs. \n The Fix is In \n To fix things up, try this: \n \xa0 \xa0 void main() { \xa0 \xa0 \xa0 \xa0 String x = "Dart is great."; \xa0 \xa0 \xa0 \xa0 print(x); \xa0 \xa0 } \n Now that x is explicitly declared to be of type String, DartPad is happy, secure in the assumption that you know what you\'re doing. In this example, you could also have used var and allowed Dart to infer the String type from the initialization value. \n Hey! Why is int lowercase, but String is capitalized? This may seem like a plot to make things more confusing for you than they need to be, but really the reason lies in the way programming languages have evolved over time. Dart was built to be familiar to those coming from other languages, like Java or C++. Unlike Dart, those languages have the concept of primitive types, special types that are fundamentally supported. Primitives are typically denoted by lowercase language keywords, while complex or user-defined types are capitalized. Even though all Dart types are simply objects, and Dart has no primitives, the language designers opted for familiarity in this case.\xa0 \n Fundamental Types \n There is no limit to the number of types a program may have, but there are a few types that are fundamental to Dart: \n \n \n \n \n \n \n Type \n \n Description \n Examples \n \n \n int \n Integer (whole number) \n 5, -13, 0 \n \n \n double \n Floating-point number (decimals) \n 3.14, 18.0, -33.999 \n \n \n num \n Integer or floating-point number \n 5, 3.14, -13, 999.666 \n \n \n bool \n Boolean \n true, false \n \n \n String \n String of zero or more characters \n "hi", "John Smith", "X", "" \n \n \n List \n List of values in series \n [1, 2, 3], ["one", "two", "three"] \n \n \n Map \n Map of values by key \n {"x": 8, "y": 16} \n \n \n dynamic \n Any type \n \n \n \n \n Dart art 的 const 與 final 型別 \n The "const" and "final" keywords, both of which define a variable as being a constant, a final immutable value. "final" means you can only set it once, but you can do so at runtime, while "const" means you can only set it once, but its value must be knowable at compile-time. \n 運算子\xa0 (Operators) \n In Dart, operators instruct the computer to perform operations on operands. An operand is any value upon which an operation is to be carried out. \n 複合賦值運算子 (Compound Assignment Operators) \n 字串 (Strings) \n Dart 的字串連結, 可以直接兩個以上單引號字串或雙引號字串連在一起, 或者透過 "+" 加號連接多個字串. \n 單位換算範例 \n 判斷式 \n 布林運算 \n 模數運算 (Modulo Operator) \n 開關 (多中選一) \n 循環迴圈 (While Loops) \n D0-While 迴圈 \n For 迴圈 \n 函式 \n 函式變數 \n 函式回傳 \n 變數範圍 \n 數列 (Lists) \n 常數 \n Final 變數 \n 程式範例 \n Javascript interop: \n https://github.com/graphicbeacon/js-dart-interop-samples \n https://github.com/matanlurey/dart_js_interop \n https://github.com/dart-lang/dart-pad/wiki/Gists \n HttpClient 類別位於 dart:io 程式庫中, 只能在 Server 中執行. \n https://api.dartlang.org/stable/2.1.1/dart-io/HttpClient-class.html \n HttpRequest 類別位於\xa0 dart:html 程式庫中, 只能在網際 Client 中執行. \n https://api.dartlang.org/stable/2.0.0/dart-html/HttpRequest-class.html \n https://dart.dev/tutorials/web/fetch-data \n https://codeburst.io/deploying-dart-2-apps-on-heroku-27fa120f1ec4 \n 參考資料 \n https://learnxinyminutes.com/docs/dart/?ref=hackr.io \n https://itnext.io/learn-dart-before-you-flutter-d1c0be6cf892 \n', 'tags': '', 'url': 'Dart.html'}, {'title': 'Dart on Server', 'text': 'Aqueduct: \n Installation: \n pub global activate aqueduct \n https://dart-lang.github.io/server/ \n https://aqueduct.io/ \n https://github.com/stablekernel/aqueduct \n https://stablekernel.com/dart-on-the-server-aqueduct-3-for-dart-2/ \n https://stablekernel.com/future-server-side-programming-googles-dart-2/ \n https://stablekernel.com/binding-rest-interface-postgres-dart/ \n https://stablekernel.com/concurrency-in-server-side-dart/ \n https://medium.com/swlh/server-side-dart-with-postgresql-142e9eec1ed1 \n https://itnext.io/part-2-a-complete-guide-for-building-restful-applications-using-aqueduct-c58688ab8b8e \n https://itnext.io/authentication-with-jwt-in-dart-6fbc70130806 \n Chat in Dart:\xa0 https://github.com/graphicbeacon/dart-bulma-chat-app \xa0 \n https://dev.to/graphicbeacon/build-a-basic-chat-application-in-dart-2-part-1-4ekj \n https://dev.to/graphicbeacon/build-a-chat-application-in-dart-2-part-2-48df \n https://dev.to/graphicbeacon/build-a-chat-application-in-dart-part-3-1bm5 \n 簡單的 http 伺服器: \n import \'dart:io\';\n\nmain() async {\n  var server = await HttpServer.bind(InternetAddress.LOOPBACK_IP_V4, 8080);\n  print("Serving at ${server.address}:${server.port}");\n\n  await for (var request in server) {\n    request.response\n      ..headers.contentType = new ContentType("text", "plain", charset: "utf-8")\n      ..write(\'Hello, world\')\n      ..close();\n  }\n} \n', 'tags': '', 'url': 'Dart on Server.html'}, {'title': 'DartPad', 'text': 'https://dart.dev/tools/dartpad \n https://github.com/dart-lang/dart-pad \n https://dart.dev/tutorials/web/low-level-html/remove-elements \n https://github.com/dart-lang/dart-pad/issues/1129 \n https://github.com/grpc/grpc-dart \n Dartpad 的執行需要\xa0 https://github.com/dart-lang/dart-services , (所需設定位於  https://github.com/mdecourse/dartpad/blob/master/lib/services/common.dart , 若需全部在近端使用 dartpad, 必須修改設定, 並自行啟動 dart-services), 因此使用跨網域啟動 dartpad 的 WWW 伺服器需要允許\xa0 https://en.wikipedia.org/wiki/Cross-origin_resource_sharing , 同時在 dartpad 中提供資料的其他 WWW 伺服器也需要支援 CORS. \n 為了讓 CMSiMDE 能夠全域支援 CORS, 必須以 python -m pip install flask_cors 安裝 flask_cors, 並且在 CMSiMDE 的  flaskapp.py  中納入 CORS. \n 例如: \n # 導入CORS\n# python -m pip install flask_cors\nfrom flask_cors import CORS\n\n# 其他原始碼\n\napp = Flask(__name__)\nCORS(app, support_credentials=False)\n\n# 其他原始碼 \n \n \n 自行 Build dart-pad: \n git clone  https://github.com/mdecourse/dart-pad \n 之後, 進入 dart-pad 目錄之後, 以 pub get 取得所需 dependencies \n 然後以 webdev build 之後, 將會在 build\xa0 目錄中產生所需的相關檔案.\xa0 (注意: 使用 webdev.bat 時, 必須查看批次檔案中所引用的 dart 所在路徑是否正確) \n 之後將 build 目錄的內容送到\xa0 https://github.com/dartpad/dartpad.github.io \xa0倉儲, 必將 master 分支內容建立為 Github Pages, 就可以得到: \n https://dartpad.github.io \xa0 \n 若要自行以 Python 建立用來伺服 dartpad 的 WWW 伺服器, 必須送出 "Access-Control-Allow-Origin" header, 若採 https 則必須支援 TLS 1.2 以上的版本, 此伺服器所需的 self-signed certificate 可以利用: \n openssl req -x509 -new -nodes -sha256 -utf8 -days 3650 -newkey rsa:2048 -keyout localhost.key -out localhost.crt \n 建立所需的 localhost.key 與 localhost.crt \n 範例倉儲: \n https://github.com/scrum-4/dartpad \n 範例 dartpad: \n https://scrum-4.github.io/dartpad \xa0 \n 可用於伺服 dartpad 的 http-server.py: \n import os\nimport subprocess\nimport threading\nimport http.server, ssl\n\n# openssl req -x509 -new -nodes -sha256 -utf8 -days 3650 -newkey rsa:2048 -keyout localhost.key -out localhost.crt\n\nclass AcaoHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def end_headers(self):\n        self.send_my_headers()\n\n        http.server.SimpleHTTPRequestHandler.end_headers(self)\n\n    def send_my_headers(self):\n        self.send_header("Access-Control-Allow-Origin", "*")\n\ndef domake():\n    # build directory\n    #os.chdir("./../")\n    server_address = (\'localhost\', 4444)\n    httpd = http.server.HTTPServer(server_address, AcaoHTTPRequestHandler)\n    httpd.socket = ssl.wrap_socket(httpd.socket,\n                                   server_side=True,\n                                   certfile=\'localhost.crt\',\n                                   keyfile=\'localhost.key\',\n                                   ssl_version=ssl.PROTOCOL_TLSv1_2)\n    print(os.getcwd())\n    print("4444 https server started")\n    httpd.serve_forever()\n\n# 利用執行緒執行 https 伺服器\nmake = threading.Thread(target=domake)\nmake.start()\n \n 若只需以 http 協定進行測試, 以下列程式碼伺服 Dartpad build 目錄: \n from http.server import HTTPServer, SimpleHTTPRequestHandler, test\nimport sys\n\nclass CORSRequestHandler (SimpleHTTPRequestHandler):\n    def end_headers (self):\n        self.send_header(\'Access-Control-Allow-Origin\', \'*\')\n        SimpleHTTPRequestHandler.end_headers(self)\n\nif __name__ == \'__main__\':\n    test(CORSRequestHandler, HTTPServer, port=int(sys.argv[1]) if len(sys.argv) > 1 else 8000) \n Canvas 繪圖範例 \n main.dart \n import \'dart:html\';\nimport \'dart:math\' as Math;\n\nCanvasElement canvas;    \nCanvasRenderingContext2D ctx;\nint width = 200;\nint height = 200;\n\nvoid main() {\n  canvas = querySelector(\'#canvas\');\n  ctx = canvas.getContext(\'2d\');\n  \n  canvas.width = width;\n  canvas.height = height;\n  ctx.clearRect(0, 0, width, height);\n\n  ctx.beginPath();\n  ctx.arc(75, 75, 30, 0, Math.pi * 2, true); \n  ctx.stroke();\n} \n index.html \n <div id="wrapper">\n  <canvas id="canvas" width="450" height="450"></canvas>\n</div>\n \n main.css \n html, body {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n#wrapper {\n  width: 450px;\n  margin: auto;\n  border: solid thin black;\n} \n ROC Flag on Dartpad: \n http://mde.tw/dartpad/?id=b51f4d2a76e394421057a70e7d281b66 \n 將 Dart Pad 上的 rocflag.dart, index.html 與 style.css 整合為單一網際頁面的方法: \n 利用 dart2js 將 rocflag.dart 轉為 rocflag.js \n dart2js -o rocflag.js rocflag.dart \n 將 style.css 納入 index.html 中, 並導入 rocflag.js 程式. \n <!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>ROC Flag in Dart</title>\n  <!-- 將 dartpad 中的 style.css 放入 head 標註中 >\n  <style type="text/css">\n      html, body {\n      width: 100%;\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n\n    #wrapper {\n      width: 300px;\n      margin: auto;\n      border: solid thin black;\n}\n  </style>\n  <!-- 將利用 dart2js 轉出的 rocflag.js 放入 script 標註中 >\n  <script defer src="rocflag.js" type="application/javascript"></script>\n</head>\n<body>\n<!-- 將 dartpad 中 index.html 的 canvas 標註放入 body 頁面中 -->\n<div id="wrapper">\n  <canvas id="canvas" width="300" height="200"></canvas>\n</div>\n</body>\n</html>\n \n /downloads/dart_ex/rocflag/index.html \n 自行建立  https://dartpad.github.io \xa0 \n https://github.com/mdecourse/dart-pad \xa0為 fork 自\xa0 https://github.com/dart-lang/dart-pad \xa0的自有倉儲, 只須執行: \n cd dart-pad \n pub get \n webdev build \n 就可以在 build\xa0 目錄中建立網際 Dartpad 所需的檔案, 由於 Dartpad 需要在全網站名稱中, 才能正確引用其下的 embedded html 檔案, 因此將上述編譯轉檔完成的 build 內容, 放入\xa0 https://github.com/dartpad/dartpad.github.io , 以便建立可以正常運作的  https://dartpad.github.io , 之後若\xa0 https://github.com/mdecourse/dart-pad \xa0 改版, 則完成編譯後再更新\xa0\xa0 https://github.com/dartpad/dartpad.github.io , 倉儲內容即可. \n', 'tags': '', 'url': 'DartPad.html'}, {'title': 'petitparse', 'text': 'https://github.com/petitparser/dart-petitparser \n https://pub.dev/packages/petitparser \n 應用 \n mkdir mocad \n 將 pubspec.yaml 放入 modad 目錄 \n cd mocad 後執行 pub install \n 執行 dart mocad.dart \n 得到結果: \n [null, null, 12, null, null, 23, null, null, 5] Success[1:12]: 40 \n \n 表示 pititparser 成功解析出字串中的數字, 並且求出所有數字的和 \n (digit().plus().flatten() | any().map((_) => null)).star() \n 表示,\xa0先匹配多個連在一起的數字, 如果無法匹配, 則以 null 代替. 然後不斷重複此一過程直到解析完整個字串 \n 其中使用下列解析語法: \n digit() 解析一個數字 any() 解析任一字串 plus() 重複一次或多次 star() 重複零次或多次 flatten() 將匹配的結果轉為字串, 而不是數列 map() 對匹配的結果進行轉換 \n pubspec.yaml \n name: mocad\nversion: 0.0.1\ndependencies:\n  petitparser: ^2.4.0 \n mocad.dart \n import "package:petitparser/petitparser.dart";\n\nmain() {\n  var str = \'aa12bb23cc5\';\n  var parser =\n      (digit().plus().flatten() | any().map((_) => null)).star().map((each) {\n    print(each);\n    var total = 0;\n    for (String numStr in each) {\n      if (numStr != null) {\n        total += int.parse(numStr);\n      }\n    }\n    return total;\n  });\n  var total = parser.parse(str);\n  print(total);\n}\n \n Another example: \n calc.dart \n /// Calculator from the tutorial.\nlibrary petitparser.example.calc;\n\nimport \'dart:math\';\n\nimport \'package:petitparser/petitparser.dart\';\n\nParser buildParser() {\n  final builder = ExpressionBuilder();\n  builder.group()\n    ..primitive((pattern(\'+-\').optional() &\n            digit().plus() &\n            (char(\'.\') & digit().plus()).optional() &\n            (pattern(\'eE\') & pattern(\'+-\').optional() & digit().plus())\n                .optional())\n        .flatten(\'number expected\')\n        .trim()\n        .map(num.tryParse))\n    ..wrapper(\n        char(\'(\').trim(), char(\')\').trim(), (left, value, right) => value);\n  builder.group()..prefix(char(\'-\').trim(), (op, a) => -a);\n  builder.group()..right(char(\'^\').trim(), (a, op, b) => pow(a, b));\n  builder.group()\n    ..left(char(\'*\').trim(), (a, op, b) => a * b)\n    ..left(char(\'/\').trim(), (a, op, b) => a / b);\n  builder.group()\n    ..left(char(\'+\').trim(), (a, op, b) => a + b)\n    ..left(char(\'-\').trim(), (a, op, b) => a - b);\n  return builder.build().end();\n}\n\nvoid main(List<String> arguments) {\n  final parser = buildParser();\n  final input = arguments.join(\' \');\n  final result = parser.parse(input);\n  if (result.isSuccess) {\n    print(\' = ${result.value}\');\n  } else {\n    print(input);\n    print(\'${\' \' * (result.position - 1)}^-- ${result.message}\');\n  }\n}\n \n dart calc.dart 3+5*9-4 \n 會列出 = 44 \n 接下來要嘗試利用 petitparser 解析 \n M[J[R,color[Green],P[0,0],L[ground,L1]],J[R,color[Green],P[12.92,32.53],L[L1,L2]],J[R,color[Green],P[73.28,67.97],L[L2,L3]],J[R,color[Green],P[33.3,66.95],L[L2]],J[R,color[Green],P[90,0],L[ground,L3]]] \n 以計算機構自由度, 各點座標位置, 以及所使用轉動軸類型與總數. \n 參考資料 \n PetitParser.pdf \n Parsing Contexts-Context Sensitive Grammars for Everyone.pdf \n https://www.lukas-renggli.ch/blog/petitparser-java-dart \n https://en.wikipedia.org/wiki/Comparison_of_parser_generators \n https://pypi.org/project/ptTools/ \n Pyslvs use lark to parse PMKS format mechanism string. \n https://github.com/lark-parser/lark \n https://pypi.org/project/parsimonious/ \n PEG  vs  LAIR :\xa0 https://github.com/lark-parser/lark/issues/218 \n var parser = letter().seq(letter().or(digit()).star()); \n var parser = letter() & (letter() | digit()).star(); \n var parser = digit().plus().flatten().map((input) => Math.parseInt(input)); \n Pyslvs \xa0中用於解析機構表示式的\xa0 expression_parser.py \n # -*- coding: utf-8 -*-\n\n"""Lark parser to parse the expression."""\n\n__author__ = "Yuan Chang"\n__copyright__ = "Copyright (C) 2016-2019"\n__license__ = "AGPL"\n__email__ = "pyslvs@gmail.com"\n\nfrom typing import (\n    Tuple,\n    List,\n    Dict,\n    Iterator,\n    Union,\n    Optional,\n)\nfrom lark import Lark, Transformer, LexError\nfrom lark.lexer import Token\ntry:\n    from .expression import (\n        get_vlinks,\n        VJoint,\n        VPoint,\n        VLink,\n    )\n    from .graph import Graph\nexcept ImportError:\n    from expression import (\n        get_vlinks,\n        VJoint,\n        VPoint,\n        VLink,\n    )\n    from graph import Graph\n\n# Color dictionary.\n_color_list: Dict[str, Tuple[int, int, int]] = {\n    \'Red\': (172, 68, 68),\n    \'Green\': (110, 190, 30),\n    \'Blue\': (68, 120, 172),\n    \'Cyan\': (0, 255, 255),\n    \'Magenta\': (255, 0, 255),\n    \'Brick-Red\': (255, 130, 130),\n    \'Yellow\': (255, 255, 0),\n    \'Gray\': (160, 160, 160),\n    \'Orange\': (225, 165, 0),\n    \'Pink\': (225, 192, 230),\n    \'Black\': (0, 0, 0),\n    \'White\': (255, 255, 255),\n    \'Dark-Red\': (128, 0, 0),\n    \'Dark-Green\': (0, 128, 0),\n    \'Dark-Blue\': (0, 0, 128),\n    \'Dark-Cyan\': (128, 0, 128),\n    \'Dark-Magenta\': (255, 0, 255),\n    \'Dark-Yellow\': (128, 128, 0),\n    \'Dark-Gray\': (128, 128, 128),\n    \'Dark-Orange\': (225, 140, 0),\n    \'Dark-Pink\': (225, 20, 147),\n}\n\ncolor_names = tuple(sorted(_color_list.keys()))\n\n\ndef color_rgb(name: str) -> Tuple[int, int, int]:\n    """Get color by name.\n\n    + Invalid color\n    + Color key\n    + RGB string "(r, g, b)".\n    """\n    if name in _color_list:\n        return _color_list[name]\n    else:\n        try:\n            # Input RGB as a "(255, 255, 255)" string.\n            color_text: Tuple[int, int, int] = tuple(int(i) for i in (\n                name.replace(\'(\', \'\')\n                .replace(\')\', \'\')\n                .replace(" ", \'\')\n                .split(\',\', maxsplit=3)\n            ))\n        except ValueError:\n            return 0, 0, 0\n        else:\n            return color_text\n\n\n_GRAMMAR = Lark(r"""\n    // Number\n    DIGIT: "0".."9"\n    INT: DIGIT+\n    SIGNED_INT: ["+" | "-"] INT\n    DECIMAL: INT "." INT? | "." INT\n    _EXP: ("e" | "E") SIGNED_INT\n    FLOAT: INT _EXP | DECIMAL _EXP?\n    NUMBER: FLOAT | INT\n    SIGNED_NUMBER: ["+" | "-"] NUMBER\n\n    // Letters\n    LCASE_LETTER: "a".."z"\n    UCASE_LETTER: "A".."Z"\n    LETTER: UCASE_LETTER | LCASE_LETTER | "_"\n    CNAME: LETTER (LETTER | DIGIT)*\n\n    // White space and new line\n    WS: /\\s+/\n    CR: /\\r/\n    LF: /\\n/\n    NEWLINE: (CR? LF)+\n    %ignore WS\n    %ignore NEWLINE\n\n    // Comment\n    LINE_COMMENT: /#[^\\n]*/\n    MULTILINE_COMMENT: /#\\[[\\s\\S]*#\\][^\\n]*/\n    %ignore LINE_COMMENT\n    %ignore MULTILINE_COMMENT\n\n    // Custom data type\n    JOINT_TYPE: "RP" | "R" | "P"\n    COLOR: """ + "|".join(f\'"{color}"\' for color in color_names) + r"""\n    type: JOINT_TYPE\n    name: CNAME\n    number: SIGNED_NUMBER\n    color_value: INT\n\n    // Main grammar\n    joint: "J[" type ["," angle] ["," color] "," point "," link "]"\n    link: "L[" [name ("," name)* ","?] "]"\n    point: "P[" number "," number "]"\n    angle: "A[" number "]"\n    color: "color[" (("(" color_value ("," color_value) ~ 2 ")") | COLOR) "]"\n    mechanism: "M[" [joint ("," joint)* ","?] "]"\n    ?start: mechanism\n""", parser=\'lalr\')\n\n\nclass _ParamsTrans(Transformer):\n\n    """Transformer will parse into a list of VPoint data."""\n\n    @staticmethod\n    def type(n: List[Token]) -> str:\n        return str(n[0])\n\n    name = type\n\n    @staticmethod\n    def color(n: List[Token]) -> str:\n        return str(n[0]) if len(n) == 1 else str(tuple(n))\n\n    @staticmethod\n    def color_value(n: List[Token]) -> int:\n        return int(n[0])\n\n    @staticmethod\n    def number(n: List[Token]) -> float:\n        return float(n[0])\n\n    @staticmethod\n    def point(c: List[Token]) -> Tuple[Token]:\n        return tuple(c)\n\n    angle = number\n\n    @staticmethod\n    def link(a: List[Token]) -> Tuple[Token]:\n        return tuple(a)\n\n    @staticmethod\n    def joint(args: List[Token]) -> List[Union[str, int, float]]:\n        """Sort the argument list.\n\n        [0]: type\n        ([1]: angle)\n        ([2]: color)\n        [-2]: point (coordinate)\n        [-1]: link\n        """\n        type_str = args[0]\n        x, y = args[-2]\n        links = \',\'.join(args[-1])\n        if type_str == \'R\':\n            if len(args) == 3:\n                return [links, \'R\', \'Green\', x, y]\n            elif len(args) == 4:\n                return [links, \'R\', args[-3], x, y]\n        else:\n            type_angle = f\'{args[0]}:{args[1]}\'\n            if len(args) == 4:\n                return [links, type_angle, \'Green\', x, y]\n            elif len(args) == 5:\n                return [links, type_angle, args[-3], x, y]\n\n        raise LexError(f"invalid options: {args}")\n\n    @staticmethod\n    def mechanism(joints: List[Token]) -> List[Token]:\n        return joints\n\n\nclass _PositionTrans(_ParamsTrans):\n\n    """Transformer will parse into a list of position data."""\n\n    @staticmethod\n    def joint(args: List[Token]) -> Tuple[float, float]:\n        x, y = args[-2]\n        return x, y\n\n\nclass _VPointsTrans(_ParamsTrans):\n\n    """Using same grammar return as VPoints."""\n\n    @staticmethod\n    def type(n: List[Token]) -> VJoint:\n        """Return as int type."""\n        type_str = str(n[0])\n        if type_str == \'R\':\n            return VJoint.R\n        elif type_str == \'P\':\n            return VJoint.P\n        elif type_str == \'RP\':\n            return VJoint.RP\n\n    @staticmethod\n    def joint(args: List[Token]) -> VPoint:\n        """Same as parent."""\n        type_int = args[0]\n        x, y = args[-2]\n        links: Tuple[str, ...] = args[-1]\n        if type_int == VJoint.R:\n            if len(args) == 3:\n                return VPoint.r_joint(links, x, y)\n            elif len(args) == 4:\n                return VPoint(links, VJoint.R, 0., args[-3], x, y, color_rgb)\n        else:\n            if len(args) == 4:\n                return VPoint.slider_joint(links, type_int, args[1], x, y)\n            elif len(args) == 5:\n                return VPoint(links, type_int, args[1], args[-3], x, y, color_rgb)\n\n        raise LexError(f"invalid options: {args}")\n\n\n_params_translator = _ParamsTrans()\n_pos_translator = _PositionTrans()\n_vpoint_translator = _VPointsTrans()\n\n\ndef parse_params(expr: str) -> List[List[Union[str, float]]]:\n    """Using to parse the expression and return arguments."""\n    return _params_translator.transform(_GRAMMAR.parse(expr))\n\n\ndef parse_pos(expr: str) -> List[Tuple[float, float]]:\n    """Using to parse the expression and return arguments."""\n    return _pos_translator.transform(_GRAMMAR.parse(expr))\n\n\ndef parse_vpoints(expr: str) -> List[VPoint]:\n    """Parse as VPoints."""\n    return _vpoint_translator.transform(_GRAMMAR.parse(expr))\n\n\ndef parse_vlinks(expr: str) -> List[VLink]:\n    """Parse as VLinks."""\n    return get_vlinks(parse_vpoints(expr))\n\n\ndef edges_view(graph: Graph) -> Iterator[Tuple[int, Tuple[int, int]]]:\n    """This generator can keep the numbering be consistent."""\n    yield from enumerate(sorted(tuple(sorted(e)) for e in graph.edges))\n\n\ndef graph2vpoints(\n    graph: Graph,\n    pos: Dict[int, Tuple[float, float]],\n    cus: Optional[Dict[int, int]] = None,\n    same: Optional[Dict[int, int]] = None,\n    grounded: Optional[int] = None\n) -> List[VPoint]:\n    """Change NetworkX graph into VPoints.\n\n    cus: custom nodes (not joint)\n        {node_name: link_number}\n    same: multiple joints\n        {n1: n2, n3: n2} => (n1 as n2) and (n3 as n2)\n    """\n    if cus is None:\n        cus: Dict[int, int] = {}\n    if same is None:\n        same: Dict[int, int] = {}\n\n    same_r = {}\n    for k, v in same.items():\n        if v in same_r:\n            same_r[v].append(k)\n        else:\n            same_r[v] = [k]\n    tmp_list = []\n    ev = dict(edges_view(graph))\n    for i, edge in ev.items():\n        if i in same:\n            # Do not connect to anyone!\n            continue\n        edge = set(edge)\n        if i in same_r:\n            for j in same_r[i]:\n                edge.update(set(ev[j]))\n        x, y = pos[i]\n        links = [(f"L{link}" if link != grounded else \'ground\') for link in edge]\n        tmp_list.append(VPoint.r_joint(links, x, y))\n    for name in sorted(cus):\n        link = f"L{cus[name]}" if cus[name] != grounded else \'ground\'\n        x, y = pos[name]\n        tmp_list.append(VPoint.r_joint((link,), x, y))\n    return tmp_list\n\n\ntry:\n    from pygments.lexer import RegexLexer\n    from pygments.token import (\n        Comment,\n        Keyword,\n        Name,\n        Number,\n    )\nexcept ImportError:\n    HAS_PYGMENTS = False\nelse:\n    HAS_PYGMENTS = True\n\n    class PMKSLexer(RegexLexer):\n\n        """Mechanism expression highlighter by Pygments."""\n\n        name = \'Mechanism Expression\'\n\n        tokens = {\n            \'root\': [\n                (r\'#[^\\n]*\', Comment.Single),\n                (r\'#\\[[\\s\\S]*#\\][^\\n]*\', Comment.Multiple),\n                (r\'M|J|L|P|A|color\', Name.Function),\n                (\'|\'.join(f"{color}" for color in reversed(color_names)), Name.Variable),\n                (r\'RP|R|P\', Keyword.Constant),\n                (r\'(\\d+\\.\\d*|\\.\\d+)([eE][+-]?\\d+)?\', Number.Float),\n            ]\n        }\n \n \n', 'tags': '', 'url': 'petitparse.html'}, {'title': 'MOCAD', 'text': 'Mobile Oriented Computer Aided Design \n https://dart.dev/tutorials/web/fetch-data', 'tags': '', 'url': 'MOCAD.html'}]};